<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2014. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema"
            xmlns:tool="http://www.springframework.org/schema/tool"
            xmlns:beans="http://www.springframework.org/schema/beans"
            xmlns="http://www.axonframework.org/schema/core"
            targetNamespace="http://www.axonframework.org/schema/core"
            elementFormDefault="qualified">

    <xsd:import namespace="http://www.springframework.org/schema/beans"
                schemaLocation="http://www.springframework.org/schema/beans/spring-beans.xsd"/>
    <xsd:import namespace="http://www.springframework.org/schema/tool"
                schemaLocation="http://www.springframework.org/schema/tool/spring-tool.xsd"/>

    <!-- ================================== -->
    <!-- ==== eventBus ==================== -->
    <!-- ================================== -->
    <xsd:element name="event-bus">
        <xsd:annotation>
            <xsd:documentation>
                Spring context schema extension for the definition of an EventBus instance.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventhandling.ClusteringEventBus"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="terminal" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the EventBusTerminal implementation that publishes all
                                EventMessages to all the Clusters, either in this VM or across VM's. Defaults to
                                an instance that dispatches directly to all known local clusters (i.e. SimpleEventBus
                                behavior).
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventhandling.EventBusTerminal"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="cluster-selector" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the ClusterSelector implementation that arranges
                                EventListener into clusters. By default, auto-detects clusters defined in the
                                application contexts. If none are present, reverts to a ClusterSelector implementation
                                that puts all Event Listeners in a single Simple Cluster (i.e. SimpleEventBus behavior).
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventhandling.ClusterSelector"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="cluster">
        <xsd:annotation>
            <xsd:documentation>
                Defines a Cluster to use with the Event Bus. The selectors define which Event Listeners will be selected
                to join this cluster.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventhandling.Cluster"/>
                    <tool:exports type="org.axonframework.eventhandling.ClusterSelector"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:all>
                <xsd:element ref="beans:bean" minOccurs="0"/>
                <xsd:element name="meta-data" type="beans:mapType" minOccurs="0"/>
                <xsd:element name="ordered" minOccurs="0">
                    <xsd:complexType>
                        <xsd:attribute name="order-resolver-ref" use="optional">
                            <xsd:annotation>
                                <xsd:documentation>The reference to the resolver that provides the order for each
                                    registered Event Listener. Defaults to an implementation that checks for Spring's
                                    @Order annotation.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                    </xsd:complexType>
                </xsd:element>
                <xsd:element name="selectors" type="selectorType" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation>
                            Describes the criteria an Event Listener must meet to be selected for this instance. One or
                            more sub-elements should be provided to define the criteria.
                        </xsd:documentation>
                        <xsd:appinfo>
                            <tool:annotation>
                                <tool:exports type="org.axonframework.eventhandling.ClusterSelector"/>
                            </tool:annotation>
                        </xsd:appinfo>
                    </xsd:annotation>
                </xsd:element>
                <xsd:element name="replay-config" minOccurs="0">
                    <xsd:annotation>
                        <xsd:documentation>
                            Indicates this cluster is capable of replaying events from an Event Store. This
                            means a ReplayingCluster will be created.
                        </xsd:documentation>
                    </xsd:annotation>
                    <xsd:complexType>
                        <xsd:attribute name="transaction-manager" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>
                                    The transaction manager to manage the transactions during the replay. By
                                    default, it is autowired.
                                </xsd:documentation>
                                <xsd:appinfo>
                                    <tool:annotation kind="ref">
                                        <tool:expected-type
                                                type="org.springframework.transaction.PlatformTransactionManager"/>
                                    </tool:annotation>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="event-store" type="xsd:string">
                            <xsd:annotation>
                                <xsd:documentation>
                                    The reference to the event store providing the events to replay. This Event
                                    Store must implement EventStoreManagement. By default, it is autowired from
                                    the application context.
                                </xsd:documentation>
                                <xsd:appinfo>
                                    <tool:annotation kind="ref">
                                        <tool:expected-type
                                                type="org.axonframework.eventstore.management.EventStoreManagement"/>
                                    </tool:annotation>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="commit-threshold" type="xsd:string" use="optional" default="-1">
                            <xsd:annotation>
                                <xsd:documentation>
                                    The number of events to process before committing a running transaction.
                                    Defaults to -1, which means no commits are done until the end of the replay
                                    process.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="incoming-message-handler-ref" type="xsd:string" use="optional">
                            <xsd:annotation>
                                <xsd:documentation>
                                    A reference to the IncomingMessageHandler that deals with incoming messages
                                    during replay. If this attribute is specified, the 'incoming-messages'
                                    attribute is ignored. Defaults to a message handler that backlogs incoming
                                    messages and processed them at the end of the replay.
                                </xsd:documentation>
                                <xsd:appinfo>
                                    <tool:annotation kind="ref">
                                        <tool:expected-type
                                                type="org.axonframework.eventhandling.replay.IncomingMessageHandler"/>
                                    </tool:annotation>
                                </xsd:appinfo>
                            </xsd:annotation>
                        </xsd:attribute>
                        <xsd:attribute name="incoming-messages" use="optional"
                                       default="backlog">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Shorthand configuration to specify an Axon-provided IncomingMessageHandler
                                    implementation. Defaults to 'backlog'.
                                </xsd:documentation>
                            </xsd:annotation>
                            <xsd:simpleType>
                                <xsd:union memberTypes="xsd:string">
                                    <xsd:simpleType>
                                        <xsd:restriction base="xsd:string">
                                            <xsd:enumeration value="backlog"/>
                                            <xsd:enumeration value="discard"/>
                                        </xsd:restriction>
                                    </xsd:simpleType>
                                </xsd:union>
                            </xsd:simpleType>
                        </xsd:attribute>
                    </xsd:complexType>
                </xsd:element>
            </xsd:all>
            <xsd:attribute name="id" type="xsd:string">
                <xsd:annotation>
                    <xsd:documentation><![CDATA[
	The unique identifier of this cluster. It serves as the bean ID as well as the Cluster's name
				]]></xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="type" type="xsd:string"/>
            <xsd:attribute name="order" type="xsd:string" default="0">
                <xsd:annotation>
                    <xsd:documentation>
                        Defines the relative order in which this cluster should be evaluated, compared to other
                        clusters. When the order is identical to that of another cluster, the ordering happens
                        based on the alphabetical order of their bean name.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="default" type="xsd:string" default="false">
                <xsd:annotation>
                    <xsd:documentation>
                        Indicates whether this cluster should be selected as the default cluster. Only one
                        cluster should have this set to true. If multiple clusters are configured as "default",
                        the one with the lowest "order" will selected.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="selectorType">
        <xsd:choice minOccurs="1" maxOccurs="unbounded">
            <!--<xsd:element name="instance-of" type="selectorInstanceOfType"/>-->
            <xsd:element name="class-name-matches" type="selectorClassNamePatternMatchType"/>
            <xsd:element name="package" type="selectorPackagePrefixType"/>
            <xsd:element name="annotation" type="selectorAnnotationType"/>
        </xsd:choice>
    </xsd:complexType>

    <xsd:complexType name="selectorInstanceOfType">
        <xsd:attribute name="type" type="xsd:string">
            <xsd:annotation>
                <xsd:documentation>The type of class that the EventListener must implement (or extend) in order to be
                    selected for this cluster.
                </xsd:documentation>
                <xsd:appinfo>
                    <tool:annotation>
                        <tool:assignable-to type="java.lang.Object"/>
                    </tool:annotation>
                </xsd:appinfo>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <xsd:complexType name="selectorClassNamePatternMatchType">
        <xsd:annotation>
            <xsd:documentation>Defines a selector that will match an Event Listeners class name against a pattern.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="pattern" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="selectorPackagePrefixType">
        <xsd:annotation>
            <xsd:documentation>Defines a selector that will match an Event Listeners class name using its package.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="prefix" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="selectorAnnotationType">
        <xsd:annotation>
            <xsd:documentation>Defines a selector that will match an Event Listeners class name if it is annotated with
                a specific annotation.
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="type" type="xsd:string" use="required">
            <xsd:annotation>
                <xsd:documentation>The type of annotation to find on the class.</xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="check-superclass" type="xsd:boolean" default="false">
            <xsd:annotation>
                <xsd:documentation>Whether or not annotations should be located on superclasses as well. Note that
                    @Inherited annotations are always detected on super classes.
                </xsd:documentation>
            </xsd:annotation>
        </xsd:attribute>
    </xsd:complexType>

    <!-- ================================== -->
    <!-- ==== commandBus ================== -->
    <!-- ================================== -->
    <xsd:element name="command-bus">
        <xsd:annotation>
            <xsd:documentation>
                Spring context schema extension for the definition
                of a CommandBus instance.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.commandhandling.SimpleCommandBus"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>

        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:all>
                        <xsd:element name="dispatchInterceptors" type="beans:listOrSetType"
                                     minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>A list of dispatch interceptors to be registered with
                                    the command bus.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="handlerInterceptors" type="beans:listOrSetType"
                                     minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>A list of handler interceptors to be registered with
                                    the command bus.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="transaction-manager" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The transaction manager to execute commands in a transaction.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation>
                                    <tool:assignable-to
                                            type="org.springframework.transaction.PlatformTransactionManager"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:element name="disruptor-command-bus">
        <xsd:annotation>
            <xsd:documentation>
                Creates a DisruptorCommandBus instance. Use &lt;repositories&gt; / &lt;repository&gt; child elements
                to indicate the aggregates that are supported by this command bus.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.commandhandling.disruptor.DisruptorCommandBus"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:all>
                        <xsd:element name="invoker-interceptors" type="beans:listOrSetType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>A list of beans or references to CommandHandlerInterceptors that
                                    should be executed by the invoker thread. They are invoked just prior to the
                                    invocation of the Command Handler.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="publisher-interceptors" type="beans:listOrSetType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>A list of beans or references to CommandHandlerInterceptors that
                                    should be executed by the publisher thread. They are invoked just prior to the
                                    publication of the results (events and callback).
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="dispatcher-interceptors" type="beans:listOrSetType" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>A list of beans or references to CommandDispatchInterceptor that
                                    should be executed when a command is offered to the Command Bus. These interceptors
                                    are executed in the thread that provides the Command Message to the Command Bus.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                        <xsd:element name="repositories" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>Wrapper element for a list of &lt;repository&gt; elements. Each child
                                    element defines a supported aggregate type and the identifier of the repository to
                                    access its instances.
                                </xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
                                <xsd:sequence>
                                    <xsd:element name="repository" maxOccurs="unbounded" type="disruptorRepository">
                                        <xsd:annotation>
                                            <xsd:appinfo>
                                                <tool:annotation>
                                                    <tool:exports type="org.axonframework.repository.Repository"/>
                                                </tool:annotation>
                                            </xsd:appinfo>
                                        </xsd:annotation>
                                    </xsd:element>
                                </xsd:sequence>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="event-store" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The bean name of the event store that stores the events generated by
                                aggregates invoked by this command bus.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.eventstore.EventStore"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-bus" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The bean name of the event bus on which generated events should be
                                published.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.eventhandling.EventBus"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="serializer" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The bean name of the serializer to use to pre-serialize events messages.
                                This setting should only be provided if the given serializer is also used by the Event
                                Store and Event Bus.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.serializer.Serializer"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="invoker-threads" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The number of threads that should execute the command handler invocation.
                                Defaults to 1.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="serializer-threads" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The number of threads that should pre-serialize generated events.
                                Defaults to 1. Is ignored if no serializer is provided.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="serialized-representation" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The type of data the serialized object should be represented in.
                                Defaults to a byte array (byte[]).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="publisher-threads" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The number of threads that should store and publish generated events.
                                Defaults to 1.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="buffer-size" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The number of positions in the CommandBus' buffer. This value must be a
                                power of 2 (e.g. 128, 256, 512, 1024, etc). Defaults to 4096.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="claim-strategy">
                        <xsd:annotation>
                            <xsd:documentation>The strategy to use to claim positions in the CommandBus' buffer.
                                Defaults to a 'multi-threaded' strategy. If only a single thread ever produces commands
                                for this Command Bus, consider using the 'single-threaded' strategy.
                                <br/>
                                Deprecated, use producer-type instead. Will be removed in AxonFramework 3.0.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
                            <xsd:union memberTypes="xsd:string">
                                <!-- Trick to support IDE auto-complete -->
                                <xsd:simpleType>
                                    <xsd:restriction base="xsd:string">
                                        <xsd:enumeration value="multi-threaded"/>
                                        <xsd:enumeration value="single-threaded"/>
                                    </xsd:restriction>
                                </xsd:simpleType>
                            </xsd:union>
                        </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="producer-type">
                        <xsd:annotation>
                            <xsd:documentation>The producer type to use with the CommandBus' buffer.
                                Defaults to 'multi-threaded'. If only a single thread ever produces commands
                                for this Command Bus, consider using a 'single-threaded' producer type.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
                            <xsd:union memberTypes="xsd:string">
                                <!-- Trick to support IDE auto-complete -->
                                <xsd:simpleType>
                                    <xsd:restriction base="xsd:string">
                                        <xsd:enumeration value="multi-threaded"/>
                                        <xsd:enumeration value="single-threaded"/>
                                    </xsd:restriction>
                                </xsd:simpleType>
                            </xsd:union>
                        </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="wait-strategy">
                        <xsd:annotation>
                            <xsd:documentation>The strategy to use to when processor threads need to wait for each
                                other. Some strategies are faster, but claim more CPU for themselves. From fast (and
                                claiming CPU) to slow (and still fast, but more friendly for other processes), they are:
                                'busy-spin', 'yield', 'sleep' and 'block'. 'block' is the default.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
                            <xsd:union memberTypes="xsd:string">
                                <!-- Trick to support IDE auto-complete -->
                                <xsd:simpleType>
                                    <xsd:restriction base="xsd:string">
                                        <xsd:enumeration value="busy-spin"/>
                                        <xsd:enumeration value="yield"/>
                                        <xsd:enumeration value="sleep"/>
                                        <xsd:enumeration value="block"/>
                                    </xsd:restriction>
                                </xsd:simpleType>
                            </xsd:union>
                        </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="reschedule-commands-on-corrupt-state" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Whether to reschedule commands that have been executed against an
                                aggregate in a corrupt state. 'false' will cause those commands to fail. Defaults to
                                'true'.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="rollback-configuration" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to a bean defining the exceptions on which to rollback the
                                Unit of Work. Defaults to a strategy that rolls back on Runtime Exceptions only.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="command-target-resolver" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to a bean defining how the target of a Command is resolved from
                                the Command Message. Defaults to a AnnotationCommandTargetResolver.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="executor" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the executor that provides the threads for this command bus.
                                Defaults to an executor that creates Threads as they are needed (Cached Thread Pool).
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="cache" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The cache in which aggregates are kept when not directly in use by the
                                Command Bus. It is recommended to use an in-memory cache only. Defaults to no cache at
                                all.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="cooling-down-period" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The number of seconds to wait when shutting down to ensure no commands
                                are being processed on the command bus any more.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="transaction-manager" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The transaction manager to execute commands in a transaction. This
                                transaction manager is used to execute the publication and storage of events in a
                                transaction.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation>
                                    <tool:assignable-to
                                            type="org.springframework.transaction.PlatformTransactionManager"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="disruptorRepository">
        <xsd:complexContent>
            <xsd:extension base="eventSourcingRepositoryType">
                <xsd:attribute name="aggregate-type" type="xsd:string"
                               use="optional">
                    <xsd:annotation>
                        <xsd:documentation>The fully qualified class name of the
                            aggregate
                            to support. This value is ignored if an
                            aggregate-factory is
                            provided.
                        </xsd:documentation>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="aggregate-factory" type="xsd:string"
                               use="optional">
                    <xsd:annotation>
                        <xsd:documentation>A bean reference to the aggregate factory
                            that
                            creates instances of an aggregate that this command bus
                            will
                            process commands for. When provided, the value of the
                            "aggregate-type" property is ignored.
                        </xsd:documentation>
                        <xsd:appinfo>
                            <tool:annotation kind="ref">
                                <tool:expected-type
                                        type="org.axonframework.eventsourcing.AggregateFactory"/>
                            </tool:annotation>
                        </xsd:appinfo>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="disruptor-repository">
        <xsd:annotation>
            <xsd:documentation>
                Defines a repository that can be used in combination with the DisruptorCommandBus.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.repository.Repository"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="disruptorRepository">
                    <xsd:attribute name="command-bus" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the DisruptorCommandBus instance that the repository is
                                created for.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation>
                                    <tool:assignable-to
                                            type="org.axonframework.commandhandling.CommandBus"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="cache" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the cache used by the Disruptor Command Bus, if any. This
                                cache is only required when a snapshotter trigger is configured.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- == Annotation-based configuration= -->
    <!-- ================================== -->
    <xsd:element name="annotation-config">
        <xsd:annotation>
            <xsd:documentation>This element activates annotation-based
                configuration of event handling and command processing in the Axon
                framework. All beans with @CommandHandler or @EventHandler annotations will be configured to receive
                commands from the command bus and events from the event bus, respectively.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports
                            type="org.axonframework.commandhandling.annotation.AnnotationCommandHandlerBeanPostProcessor"/>
                    <tool:exports
                            type="org.axonframework.eventhandling.annotation.AnnotationEventListenerBeanPostProcessor"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:attribute name="command-bus" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>Explicitly select a command bus to use. If left
                        blank, a command bus will be selected from the context.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <tool:annotation kind="ref">
                            <tool:expected-type type="org.axonframework.commandhandling.CommandBus"/>
                        </tool:annotation>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="event-bus" type="xsd:string" use="optional">
                <xsd:annotation>
                    <xsd:documentation>Explicitly select an event bus to use. If left
                        blank, an event bus will be selected from the context.
                    </xsd:documentation>
                    <xsd:appinfo>
                        <tool:annotation kind="ref">
                            <tool:expected-type type="org.axonframework.eventhandling.EventBus"/>
                        </tool:annotation>
                    </xsd:appinfo>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="unsubscribe-handlers-on-shutdown" type="xsd:boolean" use="optional" default="true">
                <xsd:annotation>
                    <xsd:documentation>Indicates whether registered handlers should be unsubscribed from the
                        event/command bus when the application is shut down.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
            <xsd:attribute name="phase" type="xsd:int" use="optional">
                <xsd:annotation>
                    <xsd:documentation>Sets the Spring lifecycle phase in which the beans are subscribed and
                        unsubscribed. Defaults to 0.
                    </xsd:documentation>
                </xsd:annotation>
            </xsd:attribute>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="eventStoreType">
        <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
                <xsd:attribute name="event-serializer" use="optional" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>Reference to an event serializer to use with this event store. Defaults to
                            an XStream based serializer.
                        </xsd:documentation>
                        <xsd:appinfo>
                            <tool:annotation kind="ref">
                                <tool:expected-type type="org.axonframework.serializer.Serializer"/>
                            </tool:annotation>
                        </xsd:appinfo>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- ================================== -->
    <!-- ===== filesystem-event-store ===== -->
    <!-- ================================== -->
    <xsd:element name="filesystem-event-store">
        <xsd:annotation>
            <xsd:documentation>Spring context schema extension for the definition of an EventStore instance that stores
                events in files on the filesystem.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventstore.fs.FileSystemEventStore"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="eventStoreType">
                    <xsd:all>
                        <xsd:element name="upcasters" type="upcasterChainType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>Sets the Upcasters to use to transform old revisions of Events into
                                    their current revision. The given upcasters are chained in order to allow each
                                    instance to convert based on the outcome of any previous Upcasters.
                                    Each of the beans defined inside this element must implement the Upcaster interface.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="base-dir" use="required" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>The base directory for this event store.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- ======== jpa-event-store ========= -->
    <!-- ================================== -->
    <xsd:element name="jpa-event-store">
        <xsd:annotation>
            <xsd:documentation>Spring context schema extension for the definition
                of an EventStore instance.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventstore.jpa.JpaEventStore"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="eventStoreType">
                    <xsd:all>
                        <xsd:element name="upcasters"
                                     type="upcasterChainType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Sets the Upcasters to use to transform old revisions of Events into their current
                                    revision. The given upcasters are chained in order to allow each instance to convert
                                    based on the outcome of any previous Upcasters. Each of the beans defined inside
                                    this element must implement the Upcaster interface.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="force-utc-timestamp" use="optional" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation>Indicates whether or not the timestamps of events should be forced to
                                UTC. When false, timestamps are stored with the system timezone information. Although
                                it is strongly recommended to set this value to true, it defaults to false, for
                                backwards compatibility reasons. This setting is ignored when an event-entry-store-ref
                                or event-entry-factory-ref attribute is also specified.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="data-source" use="optional"
                                   type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Data Source that provides access to the backing database. This data source is used to
                                detect database type, and define which error codes represent concurrency related errors.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="javax.sql.DataSource"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="persistence-exception-resolver"
                                   use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the persistence exception resolver to use to detect concurrency related errors in
                                database generated exceptions.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.common.jdbc.PersistenceExceptionResolver"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="entity-manager-provider"
                                   use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the instance that provides the Event Store with an EntityManager implementation.
                                Defaults to an autowired (container managed) EntityManager, which requires a single
                                EntityManagerFactoryBean to be configured.
                                <br/>
                                Applications that have multiple Persistence Units will need to create a custom
                                EntityManagerProvider implementation with the correct @PersistenceContext(unitName=...)
                                annotation.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.util.jpa.EntityManagerProvider"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="max-snapshots-archived"
                                   use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the maximum number of snapshots to archive for an aggregate. The EventStore will
                                keep at most this number of snapshots per aggregate. Defaults to 1. A value less than 1
                                disables pruning.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="batch-size" use="optional"
                                   type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the number of events that should be read at each database access. When more than
                                this number of events must be read to rebuild an aggregate's state, the events are read
                                in batches of this size. Defaults to 100.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-entry-store-ref" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reference to the Event Entry Store, which is responsible for storing the Events in the
                                database.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.jpa.EventEntryStore"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-entry-factory-ref" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reference to the EventEntryFactory, which is responsible for creating the entities
                                that are stored in the database. Must not be used in combination with the attribute
                                event-entry-store-ref.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.jpa.EventEntryFactory"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- ======== jdbc-event-store ========= -->
    <!-- ================================== -->
    <xsd:element name="jdbc-event-store">
        <xsd:annotation>
            <xsd:documentation>Spring context schema extension for the definition
                of an EventStore instance.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventstore.jdbc.JdbcEventStore"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="eventStoreType">
                    <xsd:all>
                        <xsd:element name="upcasters"
                                     type="upcasterChainType" minOccurs="0" maxOccurs="1">
                            <xsd:annotation>
                                <xsd:documentation>
                                    Sets the Upcasters to use to transform old revisions of Events into their current
                                    revision. The given upcasters are chained in order to allow each instance to convert
                                    based on the outcome of any previous Upcasters. Each of the beans defined inside
                                    this element must implement the Upcaster interface.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="force-utc-timestamp" use="optional" type="xsd:boolean">
                        <xsd:annotation>
                            <xsd:documentation>Indicates whether or not the timestamps of events should be forced to
                                UTC. When false, timestamps are stored with the system timezone information. Although
                                it is strongly recommended to set this value to true, it defaults to false, for
                                backwards compatibility reasons. This setting is ignored when an entity-manager-provider
                                attribute is also specified.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="data-source" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Data Source that provides access to the backing database.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="javax.sql.DataSource"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="persistence-exception-resolver" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the persistence exception resolver to use to detect concurrency related errors in
                                database generated exceptions.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.common.jdbc.PersistenceExceptionResolver"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="connection-provider" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reference to the bean providing connections to the backing database. This allows for
                                more fine-grained control over how connections are managed.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.common.jdbc.ConnectionProvider"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="max-snapshots-archived" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the maximum number of snapshots to archive for an aggregate. The EventStore will
                                keep at most this number of snapshots per aggregate. Defaults to 1. A value less than 1
                                disables pruning.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="batch-size" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Sets the number of events that should be read at each database access. When more than
                                this number of events must be read to rebuild an aggregate's state, the events are read
                                in batches of this size. Defaults to 100.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="sql-schema" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reference to the bean that defines the SQL statements to use for different Event Store
                                operations
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.jdbc.EventSqlSchema"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-entry-store-ref" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>
                                Reference to the Event Entry Store, which is responsible for storing the Events in the
                                database.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.jdbc.EventEntryStore"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="upcasterChainType">
        <xsd:complexContent>
            <xsd:extension base="beans:listOrSetType">
                <xsd:attribute name="strategy" default="lazy">
                    <xsd:simpleType>
                        <xsd:restriction base="xsd:string">
                            <xsd:enumeration value="eager"/>
                            <xsd:enumeration value="lazy"/>
                        </xsd:restriction>
                    </xsd:simpleType>
                </xsd:attribute>
                <xsd:attribute name="converter-factory" type="xsd:string" use="optional">
                    <xsd:annotation>
                        <xsd:documentation>Reference to the ConverterFactory instance that
                            should be used to convert SerializedObject content types to the
                            expected type of each Upcaster. Defaults to a
                            ChainingConverterFactory which auto-detects other ConverterFactory
                            instances on the classpath, and is capable of combining them. See
                            ChainingConverterFactory JavaDoc for more information.
                        </xsd:documentation>
                        <xsd:appinfo>
                            <tool:annotation kind="ref">
                                <tool:expected-type
                                        type="org.axonframework.serializer.ConverterFactory"/>
                            </tool:annotation>
                        </xsd:appinfo>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- ================================== -->
    <!-- == repository ==================== -->
    <!-- ================================== -->

    <xsd:element name="jpa-repository">
        <xsd:annotation>
            <xsd:documentation>Defines a repository that uses Object relational mapping to store an aggregate.
                Optionally, events generated by an aggregate may be stored in an event store as well.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.repository.GenericJpaRepository"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="aggregate-type" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The fully qualified class name of the AggregateRoot type that this
                                repository will store.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="locking-strategy" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The locking strategy used by this repository (default: PESSIMISTIC). This
                                value is ignored if a lock-manager is provided.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
                            <xsd:restriction base="xsd:string">
                                <xsd:enumeration value="OPTIMISTIC"/>
                                <xsd:enumeration value="PESSIMISTIC"/>
                                <xsd:enumeration value="NO_LOCKING"/>
                            </xsd:restriction>
                        </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="lock-manager" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The lock manager used by this repository (defaults to a
                                PessimisticLockManager instance). Setting a value for this attribute will cause any
                                value submitted in locking-strategy to be ignored.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.repository.LockManager"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-store" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the EventStore used by this repository. The event store will
                                only be used to append events.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.EventStore"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-bus" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the EventBus used by this repository.</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventhandling.EventBus"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="entity-manager-provider" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Sets the instance that provides the repository with an EntityManager
                                implementation. Defaults to an autowired (container managed) EntityManager, which
                                requires a single EntityManagerFactoryBean to be configured.<br/>Applications that have
                                multiple Persistence Units will need to create a custom EntityManagerProvider
                                implementation with the correct @PersistenceContext(unitName=...) annotation.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.util.jpa.EntityManagerProvider"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="eventSourcingRepositoryType">
        <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
                <xsd:all>
                    <xsd:element name="snapshotter-trigger" type="snapshotterTriggerType" minOccurs="0"
                                 maxOccurs="1">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <tool:annotation>
                                    <tool:exports
                                            type="org.axonframework.eventsourcing.EventCountSnapshotterTrigger"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:element>
                    <xsd:element name="event-processors" type="beans:listOrSetType" minOccurs="0" maxOccurs="1">
                        <xsd:annotation>
                            <xsd:documentation>A list of processors that get access to raw event data as it read or
                                written to the event stream.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:element>
                </xsd:all>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:element name="event-sourcing-repository">
        <xsd:annotation>
            <xsd:documentation>Spring context schema extension for the definition of a Repository instance.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventsourcing.EventSourcingRepository"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="eventSourcingRepositoryType">
                    <xsd:attribute name="aggregate-type" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The fully qualified class name of the AggregateRoot type that this
                                repository will store. Either this attribute or the aggregate-type must be set.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="aggregate-factory" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventsourcing.AggregateFactory"/>
                                </tool:annotation>
                            </xsd:appinfo>
                            <xsd:documentation>The bean name of the AggregateFactory to create aggregate instances with.
                                Defaults to a GenericAggregateFactory that creates instances using a default
                                constructor. Either this attribute or the aggregate-type must be set.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="locking-strategy" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The locking strategy used by this repository (default: PESSIMISTIC). This
                                value is ignored if a lock-manager is provided.
                            </xsd:documentation>
                        </xsd:annotation>
                        <xsd:simpleType>
                            <xsd:restriction base="xsd:string">
                                <xsd:enumeration value="OPTIMISTIC"/>
                                <xsd:enumeration value="PESSIMISTIC"/>
                                <xsd:enumeration value="NO_LOCKING"/>
                            </xsd:restriction>
                        </xsd:simpleType>
                    </xsd:attribute>
                    <xsd:attribute name="lock-manager" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The lock manager used by this repository (defaults to a
                                PessimisticLockManager instance). Setting a value for this attribute will cause any
                                value submitted in locking-strategy to be ignored.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.axonframework.repository.LockManager"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-store" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the EventStore used by this repository.</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.EventStore"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-bus" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the EventBus used by this repository.</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventhandling.EventBus"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="conflict-resolver" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the ConflictResolver used by this repository.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventsourcing.ConflictResolver"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="cache-ref" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the cache that stores aggregates.</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.cache.Cache"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="snapshotterTriggerType">
        <xsd:complexContent>
            <xsd:extension base="beans:identifiedType">
                <xsd:attribute name="event-count-threshold" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>The amount of events that will trigger a snapshot to
                            be created. More specifically, if the framework detects that more
                            than the given amount of events would needed to recreate the current
                            state of an aggregate, it triggers the creation of a snapshot.
                        </xsd:documentation>
                        <xsd:appinfo>
                            <tool:annotation>
                                <tool:exports type="org.axonframework.eventsourcing.SnapshotterTrigger"/>
                            </tool:annotation>
                        </xsd:appinfo>
                    </xsd:annotation>
                </xsd:attribute>
                <xsd:attribute name="snapshotter-ref" use="required" type="xsd:string">
                    <xsd:annotation>
                        <xsd:documentation>
                            The snapshotter to trigger when the number of events exceeds the
                            threshold.
                        </xsd:documentation>
                        <xsd:appinfo>
                            <tool:annotation kind="ref">
                                <tool:expected-type type="org.axonframework.eventsourcing.Snapshotter"/>
                            </tool:annotation>
                        </xsd:appinfo>
                    </xsd:annotation>
                </xsd:attribute>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <!-- ================================== -->
    <!-- == saga manager ================== -->
    <!-- ================================== -->

    <xsd:element name="saga-manager">
        <xsd:annotation>
            <xsd:documentation>Definition of the saga manager</xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.saga.annotation.SagaManager"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:all>
                        <xsd:element name="async" minOccurs="0" maxOccurs="1" form="qualified">
                            <xsd:annotation>
                                <xsd:documentation>Indicates that the SagaManager must process incoming events
                                    asynchronously. This tag allows additional properties related to asynchronous
                                    processing to be set.
                                </xsd:documentation>
                            </xsd:annotation>
                            <xsd:complexType>
                                <xsd:attribute name="transaction-manager" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>Reference to the PlatformTransactionManager (or
                                            TransactionManager) that manages the transactions while reading, processing
                                            and persisting Sagas. Is ignored unless used in combination with the
                                            executor property.
                                        </xsd:documentation>
                                        <xsd:appinfo>
                                            <tool:annotation kind="ref">
                                                <tool:expected-type
                                                        type="org.springframework.transaction.PlatformTransactionManager"/>
                                            </tool:annotation>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="executor" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>Reference to an Executor (e.g. TaskExecutor) instance that
                                            provides the threads to process the incoming Events in. If an executor is
                                            provided, all event handling is done asynchronously using this executor.
                                        </xsd:documentation>
                                        <xsd:appinfo>
                                            <tool:annotation kind="ref">
                                                <tool:expected-type type="java.util.concurrent.Executor"/>
                                            </tool:annotation>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="buffer-size" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>The size of the processing buffer. This equals to the number
                                            of events that may be awaiting processing before the input is blocked.
                                            Defaults to 512.
                                        </xsd:documentation>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="processor-count" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>The number of the processors (threads) that will process
                                            incoming events. Make sure that the given executor is capable of
                                            concurrently running this number of processors. Defaults to 1.
                                        </xsd:documentation>
                                    </xsd:annotation>
                                </xsd:attribute>
                            </xsd:complexType>
                        </xsd:element>
                        <xsd:element name="types" type="xsd:string" minOccurs="0">
                            <xsd:annotation>
                                <xsd:documentation>A comma separated list of fully qualified class names of the sagas
                                    this manager should manage. Note that these types are included regardless of any
                                    base-package attribute that may have been provided. Types explicitly declared and
                                    found using classpath scanning (see base-package attribute) are only considered
                                    once.
                                </xsd:documentation>
                            </xsd:annotation>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="base-package" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>A comma separated list of base package names that will be scanned
                                for saga classes. All types extending AbstractAnnotatedSaga locates in any of these
                                packages (directly, or in sub packages) will be registered with this SagaManager. Types
                                explicitly declared (see types element) and found using classpath scanning are only
                                considered once.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="saga-factory" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the saga factory to use. Defaults to the GenericSagaFactory,
                                which requires a default (no-arg) constructor.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.saga.SagaFactory"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="resource-injector" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the resource injector to inject required resources in saga
                                instances. Defaults to a SpringSagaResourceInjector, which autowires sagas using
                                the Spring Application Context.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.saga.ResourceInjector"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="event-bus" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the resource injector to inject required resources in saga
                                instances. Defaults to a SpringSagaResourceInjector, which autowires sagas using
                                the Spring Application Context.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventhandling.EventBus"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="saga-repository" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the saga repository to use. Defaults to an in-memory saga
                                repository. Note that sagas will not survive an application restart when using these
                                defaults.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.saga.SagaRepository"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="suppress-exceptions" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Exception thrown when invoking the saga is rethrown if set
                                to false, and suppressed and logged if set to true. Defaults to true. This setting is
                                ignored if an asynchronous saga manager is used.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="correlation-data-provider" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the correlation data provider that provides the meta data
                                to attach to messages sent from Sagas managed by this manager.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.correlation.CorrelationDataProvider"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- == jpa saga repository =========== -->
    <!-- ================================== -->

    <xsd:element name="jpa-saga-repository">
        <xsd:annotation>
            <xsd:documentation>Definition of a Saga Repository that uses JPA to persist Sagas and Association Values.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.saga.repository.jpa.JpaSagaRepository"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:all>
                        <xsd:element name="cache-config" minOccurs="0" maxOccurs="1">
                            <xsd:complexType>
                                <xsd:attribute name="saga-cache" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>Reference to the cache that stores Sagas.</xsd:documentation>
                                        <xsd:appinfo>
                                            <tool:annotation kind="ref">
                                                <tool:expected-type type="org.axonframework.cache.Cache"/>
                                            </tool:annotation>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="associations-cache" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>Reference to the cache that stores association values.
                                        </xsd:documentation>
                                        <xsd:appinfo>
                                            <tool:annotation kind="ref">
                                                <tool:expected-type type="org.axonframework.cache.Cache"/>
                                            </tool:annotation>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:attribute>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="resource-injector" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the resource injector that provides the resources to Saga
                                instances. Defaults to a resource injector that uses autowiring on Saga instances.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.saga.ResourceInjector"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="saga-serializer" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the serializer that converts Sagas and Association Values
                                into bytes and vice-versa. Defaults to an XStream based Serializer.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.serializer.Serializer"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="entity-manager-provider" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Sets the instance that provides the repository with an EntityManager
                                implementation. Defaults to an autowired (container managed) EntityManager, which
                                requires a single EntityManagerFactoryBean to be configured.<br/>Applications that have
                                multiple Persistence Units will need to create a custom EntityManagerProvider
                                implementation with the correct @PersistenceContext(unitName=...) annotation.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.util.jpa.EntityManagerProvider"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="use-explicit-flush" use="optional" type="xsd:string" default="true">
                        <xsd:annotation>
                            <xsd:documentation>Indicates whether the repository should perform an explicit
                                EntityManager.flush() when changes are made. Defaults to true.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- == jdbc saga repository =========== -->
    <!-- ================================== -->

    <xsd:element name="jdbc-saga-repository">
        <xsd:annotation>
            <xsd:documentation>Definition of a Saga Repository that uses JPA to persist Sagas and Association Values.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.saga.repository.jdbc.JdbcSagaRepository"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:all>
                        <xsd:element name="cache-config" minOccurs="0" maxOccurs="1">
                            <xsd:complexType>
                                <xsd:attribute name="saga-cache" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>Reference to the cache that stores Sagas.</xsd:documentation>
                                        <xsd:appinfo>
                                            <tool:annotation kind="ref">
                                                <tool:expected-type type="org.axonframework.cache.Cache"/>
                                            </tool:annotation>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:attribute>
                                <xsd:attribute name="associations-cache" use="optional" type="xsd:string">
                                    <xsd:annotation>
                                        <xsd:documentation>Reference to the cache that stores association values.
                                        </xsd:documentation>
                                        <xsd:appinfo>
                                            <tool:annotation kind="ref">
                                                <tool:expected-type type="org.axonframework.cache.Cache"/>
                                            </tool:annotation>
                                        </xsd:appinfo>
                                    </xsd:annotation>
                                </xsd:attribute>
                            </xsd:complexType>
                        </xsd:element>
                    </xsd:all>
                    <xsd:attribute name="resource-injector" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the resource injector that provides the resources to Saga
                                instances. Defaults to a resource injector that uses autowiring on Saga instances.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.saga.ResourceInjector"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="saga-serializer" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Reference to the serializer that converts Sagas and Association Values
                                into bytes and vice-versa. Defaults to an XStream based Serializer.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.serializer.Serializer"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="data-source" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Sets the data-source from which the repository should fetch connections.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="javax.sql.DataSource"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="connection-provider" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Sets the reference to the bean responsible for providing connections. Can
                                be used instead of the 'data-source' attribute for more fine-grained control.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.common.jdbc.ConnectionProvider"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="sql-schema" use="optional" type="xsd:string">
                        <xsd:annotation>
                            <xsd:documentation>Sets the SQL Schema to use. Defaults to a generic schema.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.saga.repository.jdbc.SagaSqlSchema"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- == snapshotter =================== -->
    <!-- ================================== -->

    <xsd:element name="snapshotter">
        <xsd:annotation>
            <xsd:documentation>Configures a snapshotter that writes snapshots to the given event-store. Optionally,
                an executor may be provided to execute snapshotting asynchronously. Added in Axon 1.1.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports type="org.axonframework.eventsourcing.SpringAggregateSnapshotter"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <xsd:attribute name="event-store" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>Explicitly sets a specific event store to send snapshots to. The given
                                event store must implement SnapshotEventStore.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.eventstore.EventStore"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="executor" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>Select an executor to use for the snapshot creation and persistence
                                process.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="java.util.concurrent.Executor"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="transaction-manager" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>Sets the transaction manager to use. Only needed if the context contains
                                more than one transaction manager and a transaction is needed to persist the snapshots.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type
                                            type="org.springframework.transaction.PlatformTransactionManager"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>

    <!-- ================================== -->
    <!-- == aggregate command handler====== -->
    <!-- ================================== -->

    <xsd:element name="aggregate-command-handler">
        <xsd:annotation>
            <xsd:documentation>Configures a snapshotter that writes snapshots to the given event-store. Optionally,
                an executor may be provided to execute snapshotting asynchronously. Added in Axon 1.1.
            </xsd:documentation>
            <xsd:appinfo>
                <tool:annotation>
                    <tool:exports
                            type="org.axonframework.commandhandling.annotation.AggregateAnnotationCommandHandler"/>
                </tool:annotation>
            </xsd:appinfo>
        </xsd:annotation>
        <xsd:complexType>
            <xsd:complexContent>
                <xsd:extension base="beans:identifiedType">
                    <!-- specify attributes -->
                    <xsd:attribute name="aggregate-type" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The fully qualified class name of the AggregateRoot type that this
                                handler will accepts commands for.
                            </xsd:documentation>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="repository" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The repository providing instances of the aggregates</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.repository.Repository"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="command-bus" type="xsd:string" use="required">
                        <xsd:annotation>
                            <xsd:documentation>The command bus to register the command handlers with</xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.commandhandling.CommandBus"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                    <xsd:attribute name="command-target-resolver" type="xsd:string" use="optional">
                        <xsd:annotation>
                            <xsd:documentation>The strategy for resolving the targeted aggregate for a given command.
                                Defaults to an annotation based target resolution strategy, where the
                                @TargetAggregateIdentifier and @TargetAggregateVersion mark the method or field that
                                returns the identifier and expected aggregate version, respectively.
                            </xsd:documentation>
                            <xsd:appinfo>
                                <tool:annotation kind="ref">
                                    <tool:expected-type type="org.axonframework.commandhandling.CommandTargetResolver"/>
                                </tool:annotation>
                            </xsd:appinfo>
                        </xsd:annotation>
                    </xsd:attribute>
                </xsd:extension>
            </xsd:complexContent>
        </xsd:complexType>
    </xsd:element>
</xsd:schema>
