<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2012. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd
                           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd">

    <context:annotation-config/>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <import resource="classpath:/META-INF/spring/db-context.xml"/>
    <import resource="classpath:/META-INF/spring/eventstore-jpa-test-context.xml"/>

    <axon:annotation-config command-bus="commandBus-embedded-ref"/>

    <axon:saga-manager id="sagaManager" saga-factory="sagaFactory">
        <axon:types>
            org.axonframework.contextsupport.spring.StubSaga
            org.axonframework.eventhandling.scheduling.SimpleTimingSaga
        </axon:types>
    </axon:saga-manager>

    <axon:saga-manager id="sagaManagerNotSuppressingExceptions" saga-factory="sagaFactory" suppress-exceptions="false">
        <axon:types>org.axonframework.contextsupport.spring.StubSaga</axon:types>
    </axon:saga-manager>

    <axon:saga-manager id="asyncSagaManager" saga-factory="sagaFactory">
        <axon:async executor="taskExecutor"/>
        <axon:types>org.axonframework.contextsupport.spring.StubSaga</axon:types>
    </axon:saga-manager>

    <axon:saga-manager id="asyncTransactionalSagaManager" saga-repository="allDefinedSagaRepository"
                       saga-factory="sagaFactory">
        <axon:async buffer-size="32" processor-count="1" executor="taskExecutor"
                    transaction-manager="transactionManager"/>
        <axon:types>org.axonframework.contextsupport.spring.StubSaga</axon:types>
    </axon:saga-manager>

    <axon:aggregate-command-handler id="aggregateCommandHandlerWithoutTargetResolver"
                                    aggregate-type="org.axonframework.contextsupport.spring.SimpleAnnotatedAggregate"
                                    repository="testRepository"
                                    command-bus="mockCommandBus1"/>

    <axon:aggregate-command-handler id="aggregateCommandHandlerWithTargetResolver"
                                    aggregate-type="org.axonframework.contextsupport.spring.SimpleAnnotatedAggregate"
                                    repository="testRepository"
                                    command-bus="mockCommandBus2"
                                    command-target-resolver="commandTargetResolver"/>

    <axon:jpa-saga-repository id="allDefinedSagaRepository" resource-injector="mockResourceInjector"
                              use-explicit-flush="false" saga-serializer="sagaSerializer"
                              entity-manager-provider="myEntityManagerProvider"/>

    <axon:jpa-saga-repository id="cachingSagaRepository" resource-injector="mockResourceInjector">
        <axon:cache-config saga-cache="mockCache" associations-cache="mockCache"/>
    </axon:jpa-saga-repository>

    <axon:jpa-saga-repository id="noCacheSagaRepository" resource-injector="mockResourceInjector">
        <axon:cache-config />
    </axon:jpa-saga-repository>

    <axon:cluster id="firstCluster" order="2">
        <axon:meta-data>
            <entry key="meta" value="value"/>
        </axon:meta-data>
        <axon:selectors>
            <axon:package prefix="org.axonframework"/>
            <axon:annotation type="java.lang.annotation.Inherited"/>
        </axon:selectors>
    </axon:cluster>

    <axon:cluster id="defaultCluster" default="true"/>

    <axon:cluster id="replayingCluster">
        <axon:replay-config event-store="eventStore1" transaction-manager="mockTransactionManager"/>
        <axon:selectors>
            <axon:package prefix="does.not.exist"/>
        </axon:selectors>
    </axon:cluster>

    <bean id="sagaSerializer" class="org.axonframework.serializer.xml.XStreamSerializer"/>

    <bean id="commandTargetResolver" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.axonframework.commandhandling.CommandTargetResolver"/>
    </bean>

    <bean id="sagaFactory" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.axonframework.saga.SagaFactory"/>
    </bean>

    <bean id="mockCommandBus1" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.axonframework.commandhandling.CommandBus"/>
    </bean>

    <bean id="mockCommandBus2" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.axonframework.commandhandling.CommandBus"/>
    </bean>

    <bean id="mockResourceInjector" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.axonframework.saga.ResourceInjector"/>
        <property name="singleton" value="true"/>
    </bean>

    <bean id="mockTransactionManager" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.springframework.transaction.PlatformTransactionManager"/>
        <property name="singleton" value="true"/>
    </bean>

    <axon:command-bus id="commandBus-embedded-ref">
        <axon:handlerInterceptors>
            <ref local="commandBusInterceptor"/>
        </axon:handlerInterceptors>
        <axon:dispatchInterceptors>
            <ref local="dispatchInterceptor"/>
        </axon:dispatchInterceptors>
    </axon:command-bus>

    <axon:command-bus id="commandBus-embedded-interceptor-bean">
        <axon:dispatchInterceptors>
            <bean class="org.axonframework.contextsupport.spring.StubDispatchInterceptor"/>
        </axon:dispatchInterceptors>
        <axon:handlerInterceptors>
            <bean class="org.axonframework.commandhandling.interceptors.LoggingInterceptor"/>
        </axon:handlerInterceptors>
    </axon:command-bus>

    <bean id="dispatchInterceptor" class="org.axonframework.contextsupport.spring.StubDispatchInterceptor"/>

    <axon:command-bus id="commandBus-simple"/>

    <axon:event-bus id="eventBus"/>

    <axon:jpa-event-store id="eventStore1" data-source="dataSource"
                          event-serializer="eventSerializer" max-snapshots-archived="2" batch-size="1000"/>

    <axon:jpa-event-store id="eventStore2" data-source="dataSource" entity-manager-provider="myEntityManagerProvider"
                          event-serializer="eventSerializer" max-snapshots-archived="2" batch-size="1000">
        <axon:upcasters converter-factory="converterFactory" strategy="eager">
            <bean class="org.axonframework.testutils.MockitoMockFactoryBean">
                <property name="mockType" value="org.axonframework.upcasting.Upcaster"/>
            </bean>
        </axon:upcasters>
    </axon:jpa-event-store>

    <axon:jpa-event-store id="eventStore3" data-source="dataSource" entity-manager-provider="myEntityManagerProvider"
                          event-serializer="eventSerializer" max-snapshots-archived="2" batch-size="1000">
        <axon:upcasters>
            <bean class="org.axonframework.testutils.MockitoMockFactoryBean">
                <property name="mockType" value="org.axonframework.upcasting.Upcaster"/>
            </bean>
            <bean class="org.axonframework.testutils.MockitoMockFactoryBean">
                <property name="mockType" value="org.axonframework.upcasting.Upcaster"/>
            </bean>
        </axon:upcasters>
    </axon:jpa-event-store>

    <bean id="converterFactory" class="org.axonframework.serializer.ChainingConverterFactory"/>
    <bean id="myEntityManagerProvider" class="org.axonframework.common.jpa.ContainerManagedEntityManagerProvider"/>

    <axon:filesystem-event-store id="fileEventStore" base-dir="/tmp" event-serializer="eventSerializer">
        <axon:upcasters>
            <bean class="org.axonframework.testutils.MockitoMockFactoryBean">
                <property name="mockType" value="org.axonframework.upcasting.Upcaster"/>
            </bean>
            <bean class="org.axonframework.testutils.MockitoMockFactoryBean">
                <property name="mockType" value="org.axonframework.upcasting.Upcaster"/>
            </bean>
        </axon:upcasters>
    </axon:filesystem-event-store>

    <bean id="eventSerializer" class="org.axonframework.serializer.xml.XStreamSerializer"/>

    <bean id="commandBusInterceptor"
          class="org.axonframework.commandhandling.interceptors.LoggingInterceptor">
    </bean>

    <axon:event-sourcing-repository id="testRepository" locking-strategy="PESSIMISTIC"
                                    aggregate-type="org.axonframework.contextsupport.spring.RepositoryBeanDefinitionParserTest$EventSourcedAggregateRootMock"
                                    event-bus="eventBus" event-store="eventStore1" conflict-resolver="conflictResolver">
        <axon:snapshotter-trigger id="snapshotterTrigger" event-count-threshold="50" snapshotter-ref="snapshotter"/>
        <axon:event-processors>
            <bean class="org.axonframework.testutils.MockitoMockFactoryBean">
                <property name="mockType" value="org.axonframework.eventsourcing.EventStreamDecorator"/>
            </bean>
        </axon:event-processors>
    </axon:event-sourcing-repository>

    <axon:event-sourcing-repository id="testCacheRepository" cache-ref="mockCache" lock-manager="nullLockManager"
                                    aggregate-type="org.axonframework.contextsupport.spring.RepositoryBeanDefinitionParserTest$EventSourcedAggregateRootMock"
                                    event-bus="eventBus" event-store="eventStore1" conflict-resolver="conflictResolver">
        <axon:snapshotter-trigger event-count-threshold="50" snapshotter-ref="snapshotter"/>
    </axon:event-sourcing-repository>

    <axon:jpa-repository id="simpleJpaRepository"
                         aggregate-type="org.axonframework.contextsupport.spring.SimpleAnnotatedAggregate"/>

    <axon:jpa-repository id="optimisticJpaRepository" locking-strategy="OPTIMISTIC"
                         aggregate-type="org.axonframework.contextsupport.spring.SimpleAnnotatedAggregate"/>

    <axon:jpa-repository id="fullyDefinedJpaRepository" entity-manager-provider="customEntityManagerProvider"
                         event-bus="eventBus" event-store="eventStore1" lock-manager="nullLockManager"
                         aggregate-type="org.axonframework.contextsupport.spring.SimpleAnnotatedAggregate"/>

    <bean id="mockCache" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="net.sf.jsr107cache.Cache"/>
    </bean>

    <bean id="customEntityManagerProvider" class="org.axonframework.testutils.MockitoMockFactoryBean">
        <property name="mockType" value="org.axonframework.common.jpa.EntityManagerProvider"/>
    </bean>

    <axon:event-sourcing-repository id="defaultStrategyRepository"
                                    aggregate-type="org.axonframework.contextsupport.spring.RepositoryBeanDefinitionParserTest$EventSourcedAggregateRootMock"
                                    event-bus="eventBus" event-store="eventStore1" conflict-resolver="conflictResolver"/>

    <axon:jpa-repository id="jpaRepository" event-bus="eventBus"
                         aggregate-type="org.axonframework.contextsupport.spring.RepositoryBeanDefinitionParserTest$EventSourcedAggregateRootMock"/>

    <axon:jpa-repository id="hybridJpaRepository" event-bus="eventBus" event-store="eventStore1"
                         entity-manager-provider="customEntityManagerProvider"
                         aggregate-type="org.axonframework.contextsupport.spring.RepositoryBeanDefinitionParserTest$EventSourcedAggregateRootMock"/>

    <bean id="taskExecutor"
          class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="10"/>
        <property name="maxPoolSize" value="15"/>
        <property name="waitForTasksToCompleteOnShutdown" value="true"/>
    </bean>

    <bean id="conflictResolver" class="org.axonframework.eventsourcing.conflictresolvers.AcceptAllConflictResolver"/>

    <bean id="nullLockManager" class="org.axonframework.repository.NullLockManager"/>

    <axon:snapshotter id="snapshotter" event-store="eventStore1" transaction-manager="transactionManager"
                      executor="taskExecutor"/>
    <axon:snapshotter id="inThreadsnapshotter" transaction-manager="transactionManager" event-store="eventStore1"/>

</beans>
