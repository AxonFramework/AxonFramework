<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2014. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter xml:id="performance-tuning" version="5.0" xmlns="http://docbook.org/ns/docbook">
    <title>Performance Tuning</title>
    <para>This chapter contains a checklist and some guidelines to take into consideration when
        getting ready for production-level performance. By now, you have probably used the test
        fixtures to test your command handling logic and sagas. The production environment isn't as
        forgiving as a test environment, though. Aggregates tend to live longer, be used more
        frequently and concurrently. For the extra performance and stability, you're better off
        tweaking the configuration to suit your specific needs.
    </para>
    <sect1>
        <title>Database Indexes and Column Types</title>
        <sect2>
            <title>SQL Databases</title>
            <para>If you have generated the tables automatically using your JPA implementation (e.g.
                Hibernate), you probably do not have all the right indexes set on your tables.
                Different usages of the Event Store require different indexes to be set for optimal
                performance. This list suggests the indexes that should be added for the different
                types of queries used by the default <code>EventEntryStore</code> implementation: </para>
            <itemizedlist>
                <listitem>
                    <para>Normal operational use (storing and loading events):</para>
                    <para>Table 'DomainEventEntry', columns <code>type</code>,
                            <code>aggregateIdentifier</code> and <code>sequenceNumber</code>
                        (primary key or unique index) </para>
                </listitem>
                <listitem>
                    <para>Snapshotting:</para>
                    <para>Table 'SnapshotEventEntry', columns <code>type</code> and
                            <code>aggregateIdentifier</code>.</para>
                </listitem>
                <listitem>
                    <para>Replaying the Event Store contents</para>
                    <para>Table 'DomainEventEntry', column <code>timestamp</code>,
                            <code>sequenceNumber</code> and <code>aggregateIdentifier</code></para>
                </listitem>
                <listitem>
                    <para>Sagas</para>
                    <para>Table 'AssociationValueEntry', columns <code>associationKey</code> and
                            <code>sagaId</code>, </para>
                    <para>Table 'SagaEntry', column <code>sagaId</code> (unique index) </para>
                </listitem>
            </itemizedlist>
            <para>The default column lengths generated by e.g. Hibernate may work, but won't be
                optimal. A UUID, for example, will always have the same length. Instead of a
                variable length column of 255 characters, you could use a fixed length column of 36
                characters for the aggregate identifier.</para>
            <para>The 'timestamp' column in the DomainEventEntry table only stores ISO 8601
                timestamps. If all times are stored in the UTC timezone, they need a column length
                of 24 characters. If you use another timezone, this may be up to 28. Using variable
                length columns is generally not necessary, since time stamps always have the same length.<warning>
                    <title>Timezones and Event Stores</title>
                    <para>It is highly recommended to store all timestamps in UTC format. In
                        countries with Daylight Savings Time, storing timestamps in local time may
                        result in sorting errors for events generated around and during the timezone
                        switch. This does not occur when UTC is used. Some servers are configured to
                        always use UTC. Alternatively, you should configure the Event Store to
                        convert timestamps to UTC before storing them.</para>
                </warning></para>
            <para>The 'type' column in the DomainEventEntry stores the Type Identifiers of
                aggregates. Generally, these are the 'simple name' of the aggregate. Event the
                infamous 'AbstractDependencyInjectionSpringContextTests' in spring only counts 45
                characters. Here, again, a shorter (but variable) length field should
                suffice.</para>
        </sect2>
        <sect2>
            <title>MongoDB</title>
            <para>By default, the MongoEventStore will only generate the index it requires for
                correct operation. That means the required unique index on "Aggregate Identifier",
                "Aggregate Type" and "Event Sequence Number" is created when the Event Store is
                created. However, when using the MongoEventStore for certain operations, it might be
                worthwile to add some extra indices.</para>
            <para>Note that there is always a balance between query optimization and update speed.
                Load testing is ultimately the best way to discover which indices provide the best
                performance.</para>
            <itemizedlist>
                <listitem>
                    <para>Normal operational use:</para>
                    <para>An index is automatically created on "aggregateIdentifier", "type" and
                        "sequenceNumber" in the domain events (default name: "domainevents")
                        collection</para>
                </listitem>
                <listitem>
                    <para>Snapshotting:</para>
                    <para>Put a (unique) index on "aggregateIdentifier", "type" and "sequenceNumber"
                        in the snapshot events (default name: "snapshotevents") collection</para>
                </listitem>
                <listitem>
                    <para>Replaying events:</para>
                    <para>Put a non-unique index on "timestamp" and "sequenceNumber" in the domain
                        events (default name: "domainevents") collection</para>
                </listitem>
                <listitem>
                    <para>Sagas:</para>
                    <para>Put a (unique) index on the "sagaIdentifier" in the saga (default name:
                        "sagas") collection</para>
                    <para>Put an index on the "sagaType", "associations.key" and
                        "associations.value" properties in the saga (default name: "sagas")
                        collection</para>
                </listitem>
            </itemizedlist>
        </sect2>
    </sect1>
    <sect1>
        <title>Caching</title>
        <para>A well designed command handling module should pose no problems when implementing
            caching. Especially when using Event Sourcing, loading an aggregate from an Event Store
            is an expensive operation. With a properly configured cache in place, loading an
            aggregate can be converted into a pure in-memory process.
        </para>
        <para>Here are a few guidelines that help you get the most out of your caching solution: <itemizedlist>
                <listitem>
                    <para>Make sure the Unit Of Work never needs to perform a rollback for
                        functional reasons. </para>
                    <para>A rollback means that an aggregate has reached an invalid state. Axon will
                        automatically invalidate the cache entries involved. The next requrest will
                        force the aggregate to be reconstructed from its Events. If you use
                        exceptions as a potential (functional) return value, you can configure a
                            <code>RollbackConfiguration</code> on your Command Bus. By default, the
                        Unit Of Work will be rolled back on runtime exceptions.</para>
                </listitem>
                <listitem>
                    <para>All commands for a single aggregate must arrive on the machine that has
                        the aggregate in its cache. </para>
                    <para>This means that commands should be consistently routed to the same
                        machine, for as long as that machine is "healthy". Routing commands
                        consistently prevents the cache from going stale. A hit on a stale cache
                        will cause a command to be executed and fail at the moment events are stored
                        in the event store. </para>
                </listitem>
                <listitem>
                    <para>Configure a sensible time to live / time to idle</para>
                    <para>By default, caches have a tendency to have a relatively short time to
                        live, a matter of minutes. For a command handling component with consistent
                        routing, a longer time-to-idle and time-to-live is usually better. This
                        prevents the need to re-initialize an aggregate based on its events, just
                        because its cache entry expired. The time-to-live of your cache should match
                        the expected lifetime of your aggregate.</para>
                </listitem>
            </itemizedlist></para>
    </sect1>
    <sect1>
        <title>Snapshotting</title>
        <para>Snapshotting removes the need to reload and replay large numbers of events. A single
            snapshot represents the entire aggregate state at a certain moment in time. The process
            of snapshotting itself, however, also takes processing time. Therefore, there should be a
            balance in the time spent building snapshots and the time it saves by preventing a
            number of events being read back in.
        </para>
        <para>There is no default behavior for all types of applications. Some will specify a number
            of events after which a snapshot will be created, while other applications require a
            time-based snapshotting interval. Whatever way you choose for your application, make
            sure snapshotting is in place if you have long-living aggregates.
        </para>
        <para>See
            <xref linkend="using-snapshot-events"/>
            for more about snapshotting.
        </para>
    </sect1>
    <sect1>
        <title>Aggregate performance</title>
        <para>The actual structure of your aggregates has a large impact of the performance of
            command handling. Since Axon manages the concurrency around your aggregate instances,
            you don't need to use special locks or concurrent collections inside the
            aggregates.
        </para>
        <simplesect>
            <title>Override
                <code>getChildEntities</code>
            </title>
            <para>By default, the getChildEntities method in AbstractEventSourcedAggregateRoot and
                AbstractEventSourcedEntity uses reflection to inspect all the fields of each entity
                to find related entities. Especially when an aggregate contains large collections,
                this inspection could take more time than desired.
            </para>
            <para>To gain a performance benefit, you can override the <code>getChildEntities</code>
                method and return the collection of child entities yourself.</para>
        </simplesect>
    </sect1>
    <sect1>
        <title>Event Serializer tuning</title>
        <sect2>
            <title>XStream Serializer</title>
            <para>XStream is very configurable and extensible. If you just use a plain
                    <code>XStreamSerializer</code>, there are some quick wins ready to pick up.
                XStream allows you to configure aliases for package names and event class names.
                Aliases are typically much shorter (especially if you have long package names),
                making the serialized form of an event smaller. And since we're talking XML, each
                character removed from XML is twice the profit (one for the start tag, and one for
                the end tag). </para>
            <para>A more advanced topic in XStream is creating custom converters. The default
                reflection based converters are simple, but do not generate the most compact XML.
                Always look carefully at the generated XML and see if all the information there is
                really needed to reconstruct the original instance. </para>
            <para>Avoid the use of upcasters when possible. XStream allows aliases to be used for
                fields, when they have changed name. Imagine revision 0 of an event, that used a
                field called "clientId". The business prefers the term "customer", so revision 1 was
                created with a field called "customerId". This can be configured completely in
                XStream, using field aliases. You need to configure two aliases, in the following
                order: alias "customerId" to "clientId" and then alias "customerId" to "customerId".
                This will tell XStream that if it encounters a field called "customerId", it will
                call the corresponding XML element "customerId" (the second alias overrides the
                first). But if XStream encounters an XML element called "clientId", it is a known
                alias and will be resolved to field name "customerId". Check out the XStream
                documentation for more information. </para>
            <para>For ultimate performance, you're probably better off without reflection based
                mechanisms alltogether. In that case, it is probably wisest to create a custom
                serialization mechanism. The <code>DataInputStream</code> and
                    <code>DataOutputStream</code> allow you to easilly write the contents of the
                Events to an output stream. The <code>ByteArrayOutputStream</code> and
                    <code>ByteArrayInputStream</code> allow writing to and reading from byte
                arrays.</para>
        </sect2>
        <sect2>
            <title>Preventing duplicate serialization</title>
            <para>Especially in distributed systems, Event Messages need to be serialized in
                multiple occasions. In the case of a Command Handling component that uses Event
                Sourcing, each message is serialized twice: once for the Event Store, and once to
                publish it on the Event Bus. Axon's components are aware of this and have support
                for SerializationAware messages. If a SerializationAware message is detected, its
                methods are used to serialize an object, instead of simply passing the payload to a
                serializer. This allows for performance optimizations.</para>
            <para>By configuring the <code>SerializationOptimizingInterceptor</code>, all generated
                Events are wrapped into <code>SerializationAware</code> messages, and thus benefit
                from this optimization. Note that the optimization only helps if the same serializer
                is used for different components. If you use the <code>DisruptorCommandBus</code>,
                serialization can be optimized by providing a <code>Serializer</code> in the
                    <code>DisruptorConfiguration</code>. The <code>DisruptorCommandBus</code> will
                then use an extra thread (or more when configured) to pre-serialize the Event
                Message using that serializer.</para>
            <para>When you serialize messages yourself, and want to benefit from the
                SerializationAware optimization, use the <code>MessageSerializer</code> class to
                serialize the payload and meta data of messages. All optimization logic is
                implemented in that class. See the JavaDoc of the MessageSerializer for more
                details.</para>
        </sect2>
    </sect1>
    <sect1 linkend="custom-identifier-generation">
        <title>Custom Identifier generation</title>
        <para>The Axon Framework uses an
            <code>IdentifierFactory</code>
            to generate all the
            identifiers, whether they are for Events or Commands. The default
            <code>IdentifierFactory</code>
            uses randomly generated
            <code>java.util.UUID</code>
            based identifiers. Although they are very safe to use, the process to generate them
            doesn't excell in performance.
        </para>
        <para>IdentifierFactory is an abstract factory that uses Java's ServiceLoader (since Java 6)
            mechanism to find the implementation to use. This means you can create your own
            implementation of the factory and put the name of the implementation in a file called
            "<code>/META-INF/services/org.axonframework.domain.IdentifierFactory</code>". Java's
            ServiceLoader mechanism will detect that file and attempt to create an instance of the
            class named inside.
        </para>
        <para>There are a few requirements for the <code>IdentifierFactory</code>. The
            implementation must <itemizedlist>
                <listitem>
                    <para>have its fully qualified class name as the contents of the
                            <code>/META-INF/services/org.axonframework.domain.IdentifierFactory</code>
                        file on the classpath, </para>
                </listitem>
                <listitem>
                    <para>have an accessible zero-argument constructor,</para>
                </listitem>
                <listitem>
                    <para>extend <code>IdentifierFactory</code>, </para>
                </listitem>
                <listitem>
                    <para>be accessible by the context classloader of the application or by the
                        classloader that loaded the <code>IdentifierFactory</code> class, and must
                    </para>
                </listitem>
                <listitem>
                    <para>be thread-safe. </para>
                </listitem>
            </itemizedlist></para>
    </sect1>
</chapter>
