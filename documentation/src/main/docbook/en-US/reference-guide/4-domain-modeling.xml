<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2014. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter xml:id="domain-modeling" version="5.0" xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>Domain Modeling</title>
    <para>In a CQRS-based application, a Domain Model (as defined by Eric Evans and Martin Fowler)
        can be a very powerful mechanism to harness the complexity involved in the validation and
        execution of state changes. Although a typical Domain Model has a great number of building
        blocks, two of them play a major role when applied to CQRS: the Event and the
        Aggregate.
    </para>
    <para>The following sections will explain the role of these building blocks and how to implement
        them using the Axon Framework.
    </para>
    <sect1 xml:id="events">
        <title>Events</title>
        <para>Events are objects that describe something that has occurred in the application. A
            typical source of events is the Aggregate. When something important has occurred within
            the aggregate, it will raise an Event. In Axon Framework, Events can be any object. You
            are highly encouraged to make sure all events are serializable.
        </para>
        <para>When Events are dispatched, Axon wraps them in a Message. The actual type of Message
            used depends on the origin of the Event. When an Event is raised by an Aggregate, it is
            wrapped in a <code>DomainEventMessage</code> (which extends <code>EventMessage</code>).
            All other Events are wrapped in an <code>EventMessage.</code> The
                <code>EventMessage</code> contains a unique Identifier for the event, as well as a
            Timestamp and Meta Data. The <code>DomainEventMessage</code> additionally contains the
            identifier of the aggregate that raised the Event and the sequence number which allows
            the order of events to be reproduced. </para>
        <para>Even though the DomainEventMessage contains a reference to the Aggregate Identifier,
            you should always include that identifier in the actual Event itself as well. The
            identifier in the DomainEventMessage is meant for the EventStore and may not always
            provide a reliable value for other purposes.
        </para>
        <para>The original Event object is stored as the Payload of an EventMessage. Next to the
            payload, you can store information in the Meta Data of an Event Message. The intent of
            the Meta Data is to store additional information about an Event that is not primarily
            intended as business information. Auditing information is a typical example. It allows
            you to see under which circumstances an Event was raised, such as the User Account that
            triggered the processing, or the name of the machine that processed the Event. </para>
        <note>
            <para>In general, you should not base business decisions on information in the meta-data
                of event messages. If that is the case, you might have information attached that
                should really be part of the Event itself instead. Meta-data is typically used for
                auditing and tracing.
            </para>
        </note>
        <para>Although not enforced, it is good practice to make domain events immutable, preferably
            by making all fields final and by initializing the event within the constructor.
        </para>
        <note>
            <para>Although Domain Events technically indicate a state change, you should try to
                capture the intention of the state in the event, too. A good practice is to use an
                abstract implementation of a domain event to capture the fact that certain state has
                changed, and use a concrete sub-implementation of that abstract class that indicates
                the intention of the change. For example, you could have an abstract
                <code>AddressChangedEvent</code>, and two implementations
                <code>ContactMovedEvent</code>
                and
                <code>AddressCorrectedEvent</code>
                that
                capture the intent of the state change. Some listeners don't care about the intent
                (e.g. database updating event listeners). These will listen to the abstract type.
                Other listeners do care about the intent and these will listen to the concrete
                subtypes (e.g. to send an address change confirmation email to the customer).
            </para>
            <figure>
                <title>Adding intent to events</title>
                <mediaobject>
                    <imageobject role="fo">
                        <imagedata format="png" fileref="state-change-intent-hires.png" width="10cm"
                                />
                    </imageobject>
                    <imageobject role="html">
                        <imagedata format="png" fileref="state-change-intent.png"/>
                    </imageobject>
                </mediaobject>
            </figure>
        </note>
        <para>When dispatching an Event on the Event Bus, you will need to wrap it in an (Domain)
            Event Message. The <code>GenericEventMessage</code> is an implementation that allows you
            to wrap your Event in a Message. You can use the constructor, or the static
                <code>asEventMessage()</code> method. The latter checks whether the given parameter
            doesn't already implement the <code>Message</code> interface. If so, it is either
            returned directly (if it implements <code>EventMessage</code>,) or it returns a new
                <code>GenericEventMessage</code> using the given <code>Message</code>'s payload and
            Meta Data. </para>
    </sect1>
    <sect1>
        <title>Aggregate</title>
        <para>An Aggregate is an entity or group of entities that is always kept in a consistent
            state. The aggregate root is the object on top of the aggregate tree that is responsible
            for maintaining this consistent state.
        </para>
        <note>
            <para>The term "Aggregate" refers to the aggregate as defined by Evans in Domain Driven
                Design:
            </para>
            <para>
                <quote>A cluster of associated objects that are treated as a unit for the purpose of
                    data changes. External references are restricted to one member of the Aggregate,
                    designated as the root. A set of consistency rules applies within the
                    Aggregate's boundaries.
                </quote>
            </para>
        </note>
        <para>For example, a "Contact" aggregate could contain two entities: Contact and Address. To
            keep the entire aggregate in a consistent state, adding an address to a contact should
            be done via the Contact entity. In this case, the Contact entity is the appointed
            aggregate root. </para>
        <para>In Axon, aggregates are identified by an Aggregate Identifier. This may be any object,
            but there are a few guidelines for good implementations of identifiers. Identifiers
            must: <itemizedlist>
                <listitem>
                    <para>implement equals and hashCode to ensure good equality comparison with
                        other instances, </para>
                </listitem>
                <listitem>
                    <para>implement a toString() method that provides a consistent result (equal
                        identifiers should provide an equal toString() result), and </para>
                </listitem>
                <listitem>
                    <para>preferably be serializable.</para>
                </listitem>
            </itemizedlist>The test fixtures (see <xref linkend="testing"/>) will verify these
            conditions and fail a test when an Aggregate uses an incompatible identifier.
            Identifiers of type <code>String</code>, <code>UUID</code> and the numeric types are
            always suitable. </para>
        <note>
            <para>It is considered a good practice to use randomly generated identifiers, as opposed
                to sequenced ones. Using a sequence drastically reduces scalability of your
                application, since machines need to keep each other up-to-date of the last used
                sequence numbers. The chance of collisions with a UUID is very slim (a chance of
                10<superscript>−15</superscript>, if you generate 8.2 ×
                10
                <superscript>11</superscript>
                UUIDs).
            </para>
            <para>Furthermore, be careful when using functional identifiers for aggregates. They
                have a tendency to change, making it very hard to adapt your application
                accordingly.
            </para>
        </note>
        <sect2>
            <title>Basic aggregate implementations</title>
            <simplesect>
                <title><code>AggregateRoot</code>
                </title>
                <para>In Axon, all aggregate roots must implement the
                    <code>AggregateRoot</code>
                    interface. This interface describes the basic operations needed by the
                    Repository to store and publish the generated domain events. However, Axon
                    Framework provides a number of abstract implementations that help you writing
                    your own aggregates.
                </para>
                <note>
                    <para>Note that only the aggregate root needs to implement the
                        <code>AggregateRoot</code>
                        interface or implement one of the abstract
                        classes mentioned below. The other entities that are part of the aggregate
                        do not have to implement any interfaces.
                    </para>
                </note>
            </simplesect>
            <simplesect>
                <title><code>AbstractAggregateRoot</code>
                </title>
                <para>The <code>AbstractAggregateRoot</code> is a basic implementation that provides
                    a <code>registerEvent(DomainEvent)</code> method that you can call in your
                    business logic method to have an event added to the list of uncommitted events.
                    The <code>AbstractAggregateRoot</code> will keep track of all uncommitted
                    registered events and make sure they are forwarded to the event bus when the
                    aggregate is saved to a repository.</para>
            </simplesect>
        </sect2>
        <sect2 xml:id="event-sourced-aggregates">
            <title>Event sourced aggregates</title>
            <para>Axon framework provides a few repository implementations that can use event
                sourcing as storage method for aggregates. These repositories require that
                aggregates implement the
                <code>EventSourcedAggregateRoot</code>
                interface. As with
                most interfaces in Axon, we also provide one or more abstract implementations to
                help you on your way.
            </para>
            <simplesect>
                <title><code>EventSourcedAggregateRoot</code>
                </title>
                <para>The interface
                    <code>EventSourcedAggregateRoot</code>
                    defines an extra method,
                    <code>initializeState()</code>, on top of the
                    <code>AggregateRoot</code>
                    interface. This method initializes an aggregate's state based on an event
                    stream.
                </para>
                <para>Implementations of this interface must always have a default no-arg
                    constructor. Axon Framework uses this constructor to create an empty Aggregate
                    instance before initialize it using past Events. Failure to provide this
                    constructor will result in an Exception when loading the Aggregate from a
                    Repository.
                </para>
            </simplesect>
            <simplesect>
                <title><code>AbstractEventSourcedAggregateRoot</code>
                </title>
                <para>The <code>AbstractEventSourcedAggregateRoot</code> implements all methods on
                    the <code>EventSourcedAggregateRoot</code> interface, except
                        <code>getIdentifier()</code>. It defines an abstract <code>handle()</code>
                    method, which you need to implement with the actual logic to apply state changes
                    based on domain events, and <code>getChildEntities()</code>, which you can use
                    to declare the entities that are member of this aggregate. When you extend the
                        <code>AbstractEventSourcedAggregateRoot</code>, you can register new events
                    using <code>apply()</code>. This method will register the event to be committed
                    when the aggregate is saved, and will call the <code>handle()</code> method with
                    the event as parameter. You need to implement this <code>handle()</code> method
                    to apply the state changes represented by that event. Below is a sample
                    implementation of an aggregate. </para>
                <programlisting language="java">public class MyAggregateRoot extends AbstractEventSourcedAggregateRoot&lt;String> {

    private String aggregateIdentifier;
    private String someProperty;

    public MyAggregateRoot(String id) {
        apply(new MyAggregateCreatedEvent(id));
    }

    // constructor required for reconstruction
    protected MyAggregateRoot() {
    }

    protected void handle(DomainEventMessage eventMessage) {
        if (MyAggregateCreatedEvent.class.isAssignableFrom(eventMessage.getPayloadType())) {
            // make sure to always initialize the aggregate identifier
            this.aggregateIdentifier = ((MyAggregateCreatedEvent) eventMessage.getPayload()).getMyIdentifier();
            // do something with someProperty
        }
        // and more if-else-if logic here
    }

    public String getIdentifier() {
        return aggregateIdentifier;
    }

    @Override
    protected Iterable&lt;? extends EventSourcedEntity> getChildEntities() {
        return Collections.emptyList();
    }
}                </programlisting>
                <note>
                    <title><code>isAssignableFrom</code> versus <code>instanceof</code></title>
                    <para>Note that the code sample used <code>isAssignableFrom</code> to verify the
                        payload type of a command. This method is preferred over "<code>getPayload()
                            instanceof</code>" for performance reasons. When reading events from the
                        Event Store, they are actually not deserialized until the
                            <code>getPayload()</code> method is invoked. By using
                            <code>getPayloadType()</code> to detect interesting Events, you skip
                        deserialization for events that you are not interested in.</para>
                </note>
            </simplesect>
            <simplesect xml:id="annotated-aggregate-root">
                <title><code>AbstractAnnotatedAggregateRoot</code>
                </title>
                <para>As you see in the example above, the implementation of the
                        <code>handle()</code> method can become quite verbose and hard to read. The
                        <code>AbstractAnnotatedAggregateRoot</code> can help. The
                        <code>AbstractAnnotatedAggregateRoot</code> is a specialization of the
                        <code>AbstractAggregateRoot</code> that provides
                        <code>@EventSourcingHandler</code> annotation support to your aggregate.
                    Instead of a single <code>handle()</code> method, you can split the logic in
                    separate methods, with names that you may define yourself. Just annotate the
                    event handler methods with <code>@EventSourcingHandler</code>, and the
                        <code>AbstractAnnotatedAggregateRoot</code> will invoke the right method for
                    you. </para>
                <note>
                    <title>Backwards compatibility with @EventHandler</title>
                    <para>The <code>@EventSourcingHandler</code> annotation has been introduced in
                        Axon 2.1, and replaces the <code>@EventHandler</code> annotation for use
                        inside Aggregates. For backwards compatibility, Axon 2.x will still support
                        the <code>@EventHandler</code> annotation for Event Sourced Aggregates. </para>
                    <para>Note that <code>@EventHandler</code> annotated methods on an
                            <code>AbstractAnnotatedAggregateRoot</code> are called immediately when
                        events are applied to the local aggregate. This should not be confused with
                        annotating event handler methods on <code>EventListener</code> classes, in
                        which case event handler methods handle events dispatched by the
                            <code>EventBus</code>. See <xref linkend="event-listeners"/>. </para>
                </note>
                <programlisting language="java">public class MyAggregateRoot extends AbstractAnnotatedAggregateRoot {

    @AggregateIdentifier
    private String aggregateIdentifier;
    private String someProperty;

    public MyAggregateRoot(String id) {
        apply(new MyAggregateCreatedEvent(id));
    }

    // constructor needed for reconstruction
    protected MyAggregateRoot() {
    }

    @EventSourcingHandler
    private void handleMyAggregateCreatedEvent(MyAggregateCreatedEvent event) {
        // make sure identifier is always initialized properly
        this.aggregateIdentifier = event.getMyAggregateIdentifier();
        // do something with someProperty
    }
}                </programlisting>
                <para><code>@EventSourcingHandler</code> annotated methods are resolved using specific
                    rules. These rules are the same for the <code>@EventHandler</code> annotated methods, 
                    and are thoroughly explained in <xref linkend="annotated-event-handlers"/>. </para>
                <note>
                    <title>Using private methods</title>
                    <para>Event handler methods may be private, as long as the security settings of the JVM
                        allow the Axon Framework to change the accessibility of the method. This allows you to
                        clearly separate the public API of your aggregate, which exposes the methods that
                        generate events, from the internal logic, which processes the events.
                    </para>
                    <para>Most IDE's have an option to ignore "unused private method" warnings for
                        methods with a specific annotation. Alternatively, you can add an
                            <code>@SuppressWarnings("UnusedDeclaration")</code> annotation to the
                        method to make sure you don't accidentally delete an Event handler
                        method.</para>
                </note>
                <para>The <code>AbstractAnnotatedAggregateRoot</code> also requires that the field
                    containing the aggregate identifier is annotated with
                        <code>@AggregateIdentifier</code>. If you use JPA and have JPA annotations
                    on the aggregate, Axon can also use the <code>@Id</code> annotation provided by
                    JPA.</para>
            </simplesect>
            <simplesect>
                <title>Distinguishing between 'live' and 'historic' events</title>
                <para>In some cases, especially when aggregate structures grow beyond just a couple
                    of entities, it is cleaner to react on events being published in other entities
                    of the same aggregate. However, since Event Handler methods are also invoked
                    when reconstructing aggregate state, special precautions must be taken.</para>
                <para>Since Axon 2.3, it is possible to <code>apply()</code> new events inside an
                    Event Handler method. This makes it possible for an Entity B to apply an event
                    in reaction to Entity A doing something. Axon will ignore the apply() invocation
                    when replaying historic events.</para>
                <para>You can also use the <code>isLive()</code> (if you extend the
                        <code>AbstractEventSourcedAggregateRoot</code>), to check whether the
                    aggregate is 'live'. Basically, an aggregate is considered live if it has
                    finished replaying historic events. While replaying these events, isLive() will
                    return false. Using this <code>isLive()</code> method, you can perform activity
                    that should only be done when handling newly generated events.</para>
            </simplesect>
        </sect2>
        <sect2>
            <title>Complex Aggregate structures</title>
            <para>Complex business logic often requires more than what an aggregate with only an
                aggregate root can provide. In that case, it is important that the complexity is spread
                over a number of entities within the aggregate. When using event sourcing, not only
                the aggregate root needs to use events to trigger state transitions, but so does each
                of the entities within that aggregate.
            </para>
            <para>Axon provides support for event sourcing in complex aggregate structures. All
                entities other than the aggregate root need to implement
                    <code>EventSourcedEntity</code> (but extending
                    <code>AbstractEventSourcedEntity</code> or <code>AbstractAnnotatedEntity</code>
                makes implementing these entities easier). The
                    <code>EventSourcedAggregateRoot</code> implementations provided by Axon
                Framework are aware of these entities and will call their event handlers when
                needed. </para>
            <para>When an entity (including the aggregate root) applies an Event, it is registered
                with the Aggregate Root. The aggregate root applies the event locally first. Next,
                it will evaluate all fields annotated with <code>@EventSourcedMember</code> for any
                implementations of <code>EventSourcedEntity</code> and handle the event on them.
                Each entity does the same thing to its fields. </para>
            <para>To register an Event, the Entity must know about the Aggregate Root. Axon will
                automatically register the Aggregate Root with an Entity before applying any Events
                to it. This means that Entities (in contrast to the Aggregate Root) should never
                apply an Event in their constructor. Non-Aggregate Root Entities should be created
                in an <code>@EventSourcingHandler</code> annotated method in their parent Entity (as
                creation of an entity can be considered a state change of the Aggregate). Axon will
                ensure that the Aggregate Root is properly registered in time. This also means that
                a single Entity cannot be part of more than one aggregate at any time.</para>
            <para>Fields that (may) contain child entities must be annotated with
                    <code>@EventSourcedMember</code>. This annotation may be used on a number of
                field types: <itemizedlist>
                    <listitem>
                        <para>directly referenced in a field;</para>
                    </listitem>
                    <listitem>
                        <para>inside fields containing an <code>Iterable</code> (which includes all
                            collections, such as <code>Set</code>, <code>List</code>, etc); </para>
                    </listitem>
                    <listitem>
                        <para>inside both the keys and the values of fields containing a
                                <code>java.util.Map</code>
                        </para>
                    </listitem>
                </itemizedlist></para>
            <para>If the value contained in an <code>@EventSourcedMember</code> annotated field does
                not implement <code>EventSourcedEntity</code>, it is simply ignored.</para>
            <para>If you need to reference an Entity from any other location than the above
                mentioned, you can override the <code>getChildEntities()</code> method. This method
                should return a <code>Collection</code> of entities that should be notified of the
                Event. Note that each entity is invoked once for each time it is located in the
                returned <code>Collection</code>. </para>
            <para>Note that in high-performance situations, the reflective approach to finding child
                entities can be costly. In that case, you can override the
                    <code>getChildEntities()</code> method.</para>
        </sect2>
    </sect1>

</chapter>
