<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2014. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter xml:id="using-spring" version="5.0" xmlns="http://docbook.org/ns/docbook">
    <title>Using Spring</title>
    <para>The AxonFramework has many integration points with the Spring Framework. All major
        building blocks in Axon are Spring configurable. Furthermore, there are some Bean Post
        Processors that scan the application context for building blocks and automatically wire
        them.</para>
    <para>In addition, the Axon Framework makes use of Spring's Extensible Schema-based
        configuration feature to make Axon application configuration even easier. Axon Framework has
        a Spring context configuration namespace of its own that allows you to create common
        configurations using Spring's XML configuration syntax, but in a more functionally
        expressive way than by wiring together explicit bean declarations.</para>

	<sect1>
		<title>Adding support for the Java Platform Common Annotations</title>
    	<para>Axon uses JSR 250 annotations (<code>@PostConstruct</code> and <code>@PreDestroy</code>)
            to annotate lifecycle methods of some of the building blocks. Spring doesn't always
            automatically evaluate these annotations. To force Spring to do so, add the
                <code>&lt;context:annotation-config/></code> tag to your application context, as
            shown in the example below:
            <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context">

    <context:annotation-config/>

</beans>]]></programlisting></para>
	</sect1>
    <sect1>
            <title>Using the Axon namespace shortcut</title>
        <para>As mentioned earlier, the Axon Framework provides a separate namespace full of
            elements that allow you to configure your Axon applications quickly when using Spring.
            In order to use this namespace you must first add the declaration for this namespace to
            your Spring XML configuration files.</para>
        <para>Assume you already have an XML configuration file like this:</para>
        <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    ...
               
</beans>]]></programlisting>
        <para>To modify this configuration file to use elements from the Axon namespace, just add
            the following declarations:</para>
        <programlistingco>
            <areaspec>
                <area xml:id="ex.nmsp.decl" coords="3 58"/>
                <area xml:id="ex.nmsp.loc" coords="5 98"/>
            </areaspec>
            <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:axon="http://www.axonframework.org/schema/core"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.axonframework.org/schema/core http://www.axonframework.org/schema/axon-core.xsd">]]></programlisting>
            <calloutlist>
                <callout arearefs="ex.nmsp.decl">
                    <para>The declaration of the <code>axon</code> namespace reference that you will
                        use through the configuration file.</para>
                </callout>
                <callout arearefs="ex.nmsp.loc">
                    <para>Maps the Axon namespace to the XSD where the namespace is defined.</para>
                </callout>
            </calloutlist>
        </programlistingco>
    </sect1>

    <sect1>
        <title>Wiring event and command handlers</title>
        <sect2>
        <title>Event handlers</title>
        <para>Using the annotated event listeners is very easy when you use Spring. All you need to
            do is configure the <code>AnnotationEventListenerBeanPostProcessor</code> in your
            application context. This post processor will discover beans with <code>@EventHandler</code>
            annotated methods and automatically connect them to the event bus.<programlistingco>
                <areaspec>
                    <area xml:id="postprocessor-co" coords="3 67"/>
                    <area xml:id="optional-eventbus-reference-co" coords="4 52"/>
                    <area xml:id="eventlistener-co" coords="7 76"/>
                </areaspec>
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans">

    <bean class="org...AnnotationEventListenerBeanPostProcessor">
        <property name="eventBus" ref="eventBus"/>
    </bean>

    <bean class="org.axonframework.sample.app.query.AddressTableUpdater"/>

</beans>]]></programlisting>
                <calloutlist>
                    <callout arearefs="postprocessor-co">
                        <para>This bean post processor will scan the application context for beans
                            with an <code>@EventHandler</code> annotated method.</para>
                    </callout>
                    <callout arearefs="optional-eventbus-reference-co">
                        <para>The reference to the event bus is optional, if only a single
                                <code>EventBus</code> implementation is configured in the
                            application context. The bean postprocessor will automatically find and
                            wire it. If there is more than one <code>EventBus</code> in the context,
                            you must specify the one to use in the postprocessor.</para>
                    </callout>
                    <callout arearefs="eventlistener-co">
                        <para>This event listener will be automatically recognized and subscribed to
                            the event bus.</para>
                    </callout>
                </calloutlist>
            </programlistingco></para>
        <para>You can also wire event listeners "manually", by explicitly defining them within a
                <code>AnnotationEventListenerAdapter</code> bean, as shown in the code sample below.<programlistingco>
                <areaspec>
                    <area xml:id="adapter-co" coords="3 82"/>
                    <area xml:id="eventbus-reference-co" coords="7 52"/>
                </areaspec>
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans">

    <bean class="org.axonframework...annotation.AnnotationEventListenerAdapter">
        <constructor-arg>
            <bean class="org.axonframework.sample.app.query.AddressTableUpdater"/>
        </constructor-arg>
        <property name="eventBus" ref="eventBus"/>
    </bean>

</beans>]]></programlisting>
                <calloutlist>
                    <callout arearefs="adapter-co">
                        <para>The adapter turns any bean with <code>@EventHandler</code> methods
                            into an <code>EventListener</code></para>
                    </callout>
                    <callout arearefs="eventbus-reference-co">
                        <para>You need to explicitly reference the event bus to which you like to
                            register the event listener</para>
                    </callout>
                </calloutlist>
            </programlistingco></para>
        <warning>
            <para>Be careful when wiring event listeners "manually" while there is also an
                    <code>AnnotationEventListenerBeanPostProcessor</code> in the application
                context. This will cause the event listener to be wired twice.</para>
        </warning>
        </sect2>

        <sect2>
            <title>Command handlers</title>
            <para>Wiring command handlers is very much like wiring event handlers: there is an
            <code>AnnotationCommandHandlerBeanPostProcessor</code> which will automatically register
            classes containing command handler methods (i.e. methods annotated with the
            <code>@CommandHandler</code> annotation) with a command bus.

            <programlistingco>
                <areaspec>
                    <area xml:id="commandpostprocessor-co" coords="3 68"/>
                    <area xml:id="optional-commandbus-reference-co" coords="4 56"/>
                    <area xml:id="commandhandler-co" coords="7 80"/>
                </areaspec>
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans">

    <bean class="org...AnnotationCommandHandlerBeanPostProcessor">
        <property name="commandBus" ref="commandBus"/>
    </bean>

    <bean class="org.axonframework.sample.app.command.ContactCommandHandler"/>

</beans>]]></programlisting>
                <calloutlist>
                    <callout arearefs="commandpostprocessor-co">
                        <para>This bean post processor will scan the application context for beans
                            with a <code>@CommandHandler</code> annotated method.</para>
                    </callout>
                    <callout arearefs="optional-commandbus-reference-co">
                        <para>The reference to the command bus is optional, if only a single
                                <code>CommandBus</code> implementation is configured in the
                            application context. The bean postprocessor will automatically find and
                            wire it. If there is more than one <code>CommandBus</code> in the context,
                            you must specify the one to use in the postprocessor.</para>
                    </callout>
                    <callout arearefs="commandhandler-co">
                        <para>This command handler will be automatically recognized and subscribed to
                            the command bus.</para>
                    </callout>
                </calloutlist>
            </programlistingco></para>

            <para>As with event listeners, you can also wire command handlers "manually" by explicitly defining them within a
                <code>AnnotationCommandHandlerAdapter</code> bean, as shown in the code sample below.<programlistingco>
                <areaspec>
                    <area xml:id="commandadapter-co" coords="3 83"/>
                    <area xml:id="commandbus-reference-co" coords="7 56"/>
                </areaspec>
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans">

    <bean class="org.axonframework...annotation.AnnotationCommandHandlerAdapter">
        <constructor-arg>
            <bean class="org.axonframework.sample.app.command.ContactCommandHandler"/>
        </constructor-arg>
        <property name="commandBus" ref="commandBus"/>
    </bean>

</beans>]]></programlisting>
                <calloutlist>
                    <callout arearefs="commandadapter-co">
                        <para>The adapter turns any bean with <code>@EventHandler</code> methods
                            into an <code>EventListener</code></para>
                    </callout>
                    <callout arearefs="commandbus-reference-co">
                        <para>You need to explicitly reference the event bus to which you like to
                            register the event listener</para>
                    </callout>
                </calloutlist>
            </programlistingco></para>
        <warning>
            <para>Be careful when wiring command handlers "manually" while there is also an
                    <code>AnnotationCommandHandlerBeanPostProcessor</code> in the application
                context. This will cause the command handler to be wired twice.</para>
        </warning>
            <simplesect>
                <title>Wiring AggregateCommandHandlers</title>
                <para>When the <code>@CommandHandler</code> annotations are placed on the Aggregate,
                    Spring will not be able to automatically configure them. You will need to
                    specify a bean for each of the annotated Aggregate Roots as follows:</para>
                <programlisting language="xml"><![CDATA[<bean class="org.axonframework.commandhandling.annotation.AggregateAnnotationCommandHandler"
      init-method="subscribe">
    <constructor-arg value="fully.qualified.AggregateClass"/>
    <constructor-arg ref="ref-to-repo"/>
    <constructor-arg ref="ref-to-command-bus"/>
</bean>

<!-- or, when using Namespace support -->

<axon:aggregate-command-handler aggregate-type="fully.qualified.AggregateClass"
                                repository="ref-to-repo" 
                                command-bus="ref-to-command-bus"/>]]></programlisting>
            </simplesect>
    	</sect2>
        <sect2>
            <title>Annotation support using the axon namespace</title>












            <para>The previous two sections explained how you wire bean post processors to activate
                annotation support for your command handlers and event listeners. Using support from
                the Axon namespace you can accomplish the same in one go, using the
                annotation-config element: </para>
            <programlisting language="xml">&lt;axon:annotation-config /></programlisting>
            <para>The annotation-config element has the following attributes that allow you to
                configure annotation support further: </para>
            <para>
                <table frame="all">
                    <title>Attributes for annotation-config</title>

                    <tgroup cols="4" colsep="1" rowsep="1" align="left">
                        <thead>
                            <row>
                                <entry>Attribute name</entry>
                                <entry>Usage</entry>
                                <entry>Expected value type</entry>
                                <entry>Description</entry>
                            </row>
                        </thead>
                        <tbody>
                            <row>
                                <entry>commandBus</entry>
                                <entry>Conditional</entry>
                                <entry>Reference to a CommandBus Bean</entry>
                                <entry>Needed only if the application context contains more than one
                                    command bus.</entry>
                            </row>
                            <row>
                                <entry>eventBus</entry>
                                <entry>Conditional</entry>
                                <entry>Reference to an EventBus Bean</entry>
                                <entry>Needed only if the application context contains more than one
                                    event bus.</entry>
                            </row>
                        </tbody>
                    </tgroup>
                </table>
            </para>
            <simplesect>
                <title>Using JavaConfig</title>
                <para>If you use Spring JavaConfig to configure Axon, you can place the
                        <code>@AnnotationDriven</code> annotation on your config files. Similar to
                    the namespace configuration described above, you can specify the bean names of
                    the <code>EventBus</code> and <code>CommandBus</code> to register the components
                    to. This is only required when there is more than one <code>EventBus</code> or
                        <code>CommandBus</code> in the application context.</para>
            </simplesect>
        </sect2>
    </sect1>



    <sect1>
        <title>Wiring the event bus</title>
            <para>In a typical Axon application there is only one event bus. Wiring it is just a
                matter of creating a bean of a subtype of <code>EventBus</code>. The
                    <code>SimpleEventBus</code> is the provided implementation.
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans">

    <bean id="eventBus" class="org.axonframework.eventhandling.SimpleEventBus"/>

</beans>

<!-- or using the namespace: -->

<axon:event-bus id="eventBus"/>]]></programlisting></para>
        <sect2>
            <title>Configuration of Clusters</title>
            <para>Using a Clustering Event Bus in Spring is very simple. In the Spring context, you
                just need to define the clusters you wish to use and tell them which Event Listeners
                you would like to be part of that Cluster. Axon will create the necessary
                infrastructure to assign listeners to the clusters.</para>
            <programlisting language="xml"><![CDATA[<axon:cluster id="myFirstCluster">
    <axon:selectors>
        <axon:package prefix="com.mycompany.mypackage"/>
    </axon:selectors>
</axon:cluster>

<axon:cluster id="defaultCluster" default="true"/>]]></programlisting>
            <para>The example above will create two clusters. Event Listeners in the package
                    <code>com.mycompany.mypackage</code> will be assigned to
                    <code>myFirstCluster</code>, while all others are assigned to
                    <code>defaultCluster</code>. Note that the latter does not have any selectors.
                Selectors are optional if the cluster is a default.</para>
            <para>If there are conflicting selectors, and you would like to influence the order in
                which they are evaluated, you can add the <code>order</code> attribute to a cluster.
                Clusters with a lower value are evaluated before those with a higher value. Only if
                there are no matching selectors at all, Axon will assign a Listener to the Cluster
                with <code>default="true"</code>. If no suitable cluster for any listener is found,
                Axon throws an exception.</para>
            <tip>
                <title>Organizing Cluster definitions in context files</title>
                <para>When you have an application that consists of a number of modules (represented
                    in separate config files), it is possible to define the
                        <code>&lt;axon:cluster></code> in the Context where the listeners are also
                    defined. This makes the application more modular and less dependent on a
                    centralized configuration.</para>
            </tip>
        </sect2>
        <sect2>
            <title>Replayable Clusters</title>
            <para>To make a cluster replayable, simply add the <code>&lt;axon:replay-config></code>
                element to a <code>&lt;axon:cluster></code>, as in the example below:</para>
            <programlisting language="xml"><![CDATA[<axon:cluster id="replayingCluster">
    <axon:replay-config event-store="eventStore" transaction-manager="mockTransactionManager"/>
    <axon:selectors>
        <axon:package prefix="com.mycompany.mypackage"/>
    </axon:selectors>
</axon:cluster>]]></programlisting>
            <para>The <code>&lt;axon:replay-config></code> element provides the necessary
                configuration to execute replays on a Cluster. The resulting Cluster bean will be of
                type <code>ReplayingCluster</code>. </para>
        </sect2>
        <sect2>
            <title>Custom Cluster implementation</title>
            <para>It is also possible to use the <code>&lt;cluster></code> element while using a custom Cluster
                implementation:</para>
            <programlisting language="xml"><![CDATA[<axon:cluster id="custoCluster">
    <bean class="com.mycompany.MyPersonalClusterImplementation"/>
    <axon:selectors>
        <axon:package prefix="com.mycompany.mypackage"/>
    </axon:selectors>
</axon:cluster>]]></programlisting>
        </sect2>

    </sect1>
    <sect1>
        <title>Wiring the command bus</title>
        <simplesect>
            <title>The basics</title>
            <para>The command bus doesn't take any configuration to use. However, it allows you to
                configure a number of interceptors that should take action based on each incoming
                command.</para>
            <para>
                <programlisting language="xml"><![CDATA[<beans xmlns="http://www.springframework.org/schema/beans">

    <bean id="commandBus" class="org.axonframework.commandhandling.SimpleCommandBus">
        <property name="handlerInterceptors">
            <list>
                <bean class="my-interceptors"/>
            </list>
        </property>
    </bean>

</beans>]]></programlisting>
            </para>
        </simplesect>
        <simplesect>
            <title>Using the Axon namespace</title>
            <para>Setting up a basic command bus using the Axon namespace is a piece of cake: you can
                use the <code>commandBus</code> element:
                <programlisting language="xml"><![CDATA[<axon:command-bus id="commandBus"/>]]></programlisting></para>
            <para>Configuring command interceptors for your command bus is also possible using the
                    <code>&lt;axon:command-bus></code> element, like so:
                <programlisting language="xml"><![CDATA[<axon:command-bus id="commandBus">
    <axon:dispatchInterceptors>
        <bean class="..."/>
    </axon:dispatchInterceptors>
    <axon:handlerInterceptors>
        <bean class="..."/>
        <bean class="..."/>
    </axon:handlerInterceptors>
</axon:command-bus>]]></programlisting>
                Of course you are not limited to bean references; you can also include local bean
                definitions if you want. </para>
        </simplesect>
    </sect1>
    <sect1>
        <title>Wiring the Repository</title>
        <para>Wiring a repository is very similar to any other bean you would use in a Spring
            application. Axon only provides abstract implementations for repositories, which means
            you need to extend one of them. See <xref linkend="repositories-and-event-stores"/> for
            the available implementations.</para>
        <para>Repository implementations that do support event sourcing just need the event bus to
            be configured, as well as any dependencies that your own implementation has.
            <programlisting language="xml"><![CDATA[<bean id="simpleRepository" class="my.package.SimpleRepository">
    <property name="eventBus" ref="eventBus"/>
</bean>]]></programlisting></para>
        <para>Repositories that support event sourcing will also need an event store, which takes
            care of the actual storage and retrieval of events. The example below shows a repository
            configuration of a repository that extends the
            <code>EventSourcingRepository</code>.<programlisting language="xml"><![CDATA[<bean id="contactRepository" class="org.axonframework.sample.app.command.ContactRepository">
    <property name="eventBus" ref="eventBus"/>
    <property name="eventStore" ref="eventStore"/>
</bean>]]></programlisting></para>
        <para>In many cases, you can use the <code>EventSourcingRepository</code>. Below is
            an example of XML application context configuration to wire such a repository.</para>
        <para>
            <programlisting language="xml"><![CDATA[<bean id="myRepository" class="org.axonframework.eventsourcing.EventSourcingRepository">
    <constructor-arg value="fully.qualified.class.Name"/>
    <property name="eventBus" ref="eventBus"/>
    <property name="eventStore" ref="eventStore"/>
</bean>

<!-- or, when using the axon namespace -->

<axon:event-sourcing-repository id="myRepository"
                                aggregate-type="fully.qualified.class.Name"
                                event-bus="eventBus" event-store="eventStore"/>]]></programlisting>
        </para>
        <para>The repository will delegate the storage of events to the configured
                <code>eventStore</code>, while these events are dispatched using the provided
                <code>eventBus</code>.</para>
    </sect1>
    <sect1>
        <title>Wiring the Event Store</title>
        <para>All event sourcing repositories need an Event Store. Wiring the
                <code>JpaEventStore</code> and the <code>FileSystemEventStore</code> is very
            similar, but the <code>JpaEventStore</code> needs a way to get a hold of an
            EntityManager. In general, applications use a Container Managed EntityManager:</para>
        <para>
            <programlisting language="xml"><![CDATA[<bean id="eventStore" class="org.axonframework.eventstore.jpa.JpaEventStore">
    <constructor-arg>
        <bean class="org.axonframework.common.jpa.ContainerManagedEntityManagerProvider"/>
    </constructor-arg>
</bean>

<!-- declare transaction manager, data source, EntityManagerFactoryBean, etc -->]]></programlisting>
        </para>
        	<para>Using the Axon namespace support, you can quickly configure event stores backed
            either by the file system or a JPA layer using the one of the following elements:
            <programlisting language="xml"><![CDATA[<axon:jpa-event-store id="jpaEventStore"/>

<axon:filesystem-event-store id="fileSystemEventStore" base-dir="/data"/>]]></programlisting></para>
        <para>The annotation support will automatically configure a Container Managed EntityManager
            on the Jpa Event Store, but you may also configure a custom implementation using the
                <code>entity-manager-provider</code> attribute. This is useful when an application
            uses more than one EntityManagerFactory.</para>

    </sect1>
    <sect1 xml:id="spring-snapshotting">
        <title>Configuring Snapshotting</title>
        <para>Configuring snapshotting using Spring is not complex, but does require a number of
            beans to be configured in your application context.</para>
        <para>The <code>EventCountSnapshotterTrigger</code> needs to be configured as a proxy for
            your event store. That means all repositories should load and save aggregate from the
                <code>EventCountSnapshotterTrigger</code>, instead of the actual event store.</para>
        <programlisting language="xml"><![CDATA[<bean id="myRepository" class="org.axonframework...GenericEventSourcingRepository">
    <!-- properties omitted for brevity -->
    <property name="snapshotterTrigger">
        <bean class="org.axonframework.eventsourcing.EventCountSnapshotterTrigger">
            <property name="trigger" value="20" />
        </bean>
    </property>
</bean>

<!-- or, when using the namespace -->

<axon:event-sourcing-repository> <!-- attributes omitted for brevity -->
    <axon:snapshotter-trigger event-count-threshold="20" snapshotter-ref="snapshotter"/>
</axon:event-sourcing-repository>]]></programlisting>
        <para>The sample above configures an EventCountSnapshotter trigger that will trigger
            Snapshot creation when 20 or more events are required to reload the aggregate's current
            state. </para>
        <para>The snapshotter is configured as follows:</para>
<programlisting language="xml"><![CDATA[<bean id="snapshotter" class="org.axonframework.eventsourcing.SpringAggregateSnapshotter">
    <property name="eventStore" ref="eventStore"/>
    <property name="executor" ref="taskExecutor"/>
</bean>

<!-- or, when using the namespace -->

<axon:snapshotter id="snapshotter" event-store="eventStore" executor="taskExecutor"/>

<!-- the task executor attribute is optional. When used you can define (for example) a thread pool to perform the snapshotting -->
<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
    <property name="corePoolSize" value="2"/>
    <property name="maxPoolSize" value="5"/>
    <property name="waitForTasksToCompleteOnShutdown" value="true"/>
</bean>]]></programlisting>
        <para>The <code>SpringAggregateSnapshotter</code> will automatically detect any
                <code>PlatformTransactionManager</code> in your application context, as well as
                <code>AggregateFactory</code> instances, which all repositories typically are. That
            means you only need very little configuration to use a <code>Snapshotter</code> within
            Spring. If you have multiple <code>PlatformTransactionManager</code> beans in your
            context, you should explicitly configure the one to use.</para>
    </sect1>
    <sect1 xml:id="spring-sagas">
        <title>Configuring Sagas</title>
        <para>To use Sagas, two infrastructure components are required: the SagaManager and the
            SagaRepository. Each have their own element in the Spring application context.</para>
        <para>The SagaManager is defined as
            follows:<programlisting language="xml"><![CDATA[<axon:saga-manager id="sagaManager" saga-repository="sagaRepository"
                   saga-factory="sagaFactory"
                   resource-injector="resourceInjector">
    <axon:async executor="taskExecutor" transaction-manager="transactionManager" />
    <axon:types>
        fully.qualified.ClassName
        another.ClassName
    </axon:types>
</axon:saga-manager>]]></programlisting></para>
        <para>All properties are optional. The <code>saga-repository</code> will default to an
            in-memory repository, meaning that Sagas will be lost when the VM is shut down. The
                <code>saga-factory</code> can be provided if the Saga instances do not have a
            no-argument accessible constructor, or when special initialization is required. An
                <code>async</code> element with <code>executor</code> can be provided if Sagas
            should not be invoked by the event dispatching thread. When using asynchronous event
            handling it is required to provide the <code>transaction-manager</code> attribute. The
            default resource injector uses the Spring Context to autowire Saga instances with Spring
            Beans.</para>
        <para>Use the <code>types</code> element to provide a comma and/or newline separated list of
            fully qualified class names of the annotated sagas.</para>
        <para>When an in-memory Saga repository does not suffice, you can easily configure one that
            uses JPA as persistence mechanism as
            follows:<programlisting language="xml"><![CDATA[<axon:jpa-saga-repository id="sagaRepository" resource-injector="resourceInjector"
                          use-explicit-flush="true" saga-serializer="sagaSerializer"/>]]></programlisting></para>
        <para>The resource-injector, as with the saga manager, is optional and defaults to
            Spring-based autowiring. The saga-serializer defines how Saga instances need to be
            serialized when persisted. This defaults to an XStream based serialization mechanism.
            You may choose to explicitly flush any changes made in the repository immediately or
            postpone it until the transaction in which the changes were made are executed by setting
            the <code>use-explicit-flush</code> attribute to <code>true</code> or
            <code>false</code>, respectively. This property defaults to <code>true</code>.</para>
    </sect1>
</chapter>
