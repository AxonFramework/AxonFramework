<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (c) 2010-2014. Axon Framework
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~     http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->
<chapter xml:id="testing" version="5.0" xmlns="http://docbook.org/ns/docbook">
    <title>Testing</title>
    <para>One of the biggest benefits of CQRS, and especially that of event sourcing is that it is
        possible to express tests purely in terms of Events and Commands. Both being functional
        components, Events and Commands have clear meaning to the domain expert or business owner.
        Not only does this mean that tests expressed in terms of Events and Commands have a clear functional
        meaning, it also means that they hardly depend on any implementation choices.</para>
    <para>The features described in this chapter require the <code>axon-test</code> module, which
        can be obtained by configuring a maven dependency (use
            <code>&lt;artifactId>axon-test&lt;/artifactId></code>) or from the full package
        download. </para>
    <para>The fixtures described in this chapter work with any testing framework, such as JUnit and
        TestNG.</para>
    <sect1>
        <title>Command Component Testing</title>
        <para>The command handling component is typically the component in any CQRS based
            architecture that contains the most complexity. Being more complex than the others, this
            also means that there are extra test related requirements for this component. Simply
            put: the more complex a component, the better it must be tested.</para>
        <para>Although being more complex, the API of a command handling component is fairly easy.
            It has a command coming in, and events going out. In some cases, there might be a query as
            part of command execution. Other than that, commands and events are the only part of the
            API. This means that it is possible to completely define a test scenario in terms of
            events and commands. Typically, in the shape of:<itemizedlist>
                <listitem>
                    <para>given certain events in the past,</para>
                </listitem>
                <listitem>
                    <para>when executing this command,</para>
                </listitem>
                <listitem>
                    <para>expect these events to be published and/or stored.</para>
                </listitem>
            </itemizedlist></para>
        <para>Axon Framework provides a test fixture that allows you to do exactly that. This
            GivenWhenThenTestFixture allows you to configure a certain infrastructure, composed of
            the necessary command handler and repository, and express your scenario in terms of
            given-when-then events and commands.</para>
        <para>The following example shows the usage of the given-when-then test fixture with JUnit
            4:</para>
        <para>
            <programlistingco>
                <areaspec>
                    <area coords="7 72" xml:id="create-new-fixture-co"/>
                    <area coords="9 57" xml:id="create-generic-repository-co"/>
                    <area xml:id="register-command-handler-co" coords="10 68"/>
                    <area xml:id="given-when-then-co" coords="15 39"/>
                </areaspec>
                <programlisting language="java">public class MyCommandComponentTest {

    private FixtureConfiguration fixture;

    @Before
    public void setUp() {
        fixture = Fixtures.newGivenWhenThenFixture(MyAggregate.class);
        MyCommandHandler myCommandHandler = new MyCommandHandler(
                              fixture.getRepository());
        fixture.registerAnnotatedCommandHandler(myCommandHandler);
    }

    @Test
    public void testFirstFixture() {
        fixture.given(new MyEvent(1))
               .when(new TestCommand())
               .expectVoidReturnType()
               .expectEvents(new MyEvent(2));
    }
}</programlisting>
                <calloutlist>
                    <callout arearefs="create-new-fixture-co">
                        <para>This line creates a fixture instance that can deal with
                            given-when-then style tests. It is created in configuration stage, which
                            allows us to configure the components that we need to process the
                            command, such as the command handler and repository. An event bus and
                            command bus are automatically created as part of the fixture.</para>
                    </callout>
                    <callout arearefs="create-generic-repository-co">
                        <para>The <code>getRepository()</code> method returns an
                                <code>EventSourcingRepository</code> instance capable of storing
                                <code>MyAggregate</code> instances. This requires some conventions
                            on the MyAggregate class, as described in <xref
                                linkend="event-sourcing-repositories"/>. If there is need for a
                            custom <code>AggregateFactory</code>, use the
                                <code>registerRepository(...)</code> method to register another
                            repository with the correct <code>AggregateFactory</code>.</para>
                    </callout>
                    <callout arearefs="register-command-handler-co">
                        <para>The <code>registerAnnotatedCommandHandler</code> method will register
                            any bean as being an <code>@CommandHandler</code> with the command bus.
                            All supported command types are automatically registered with the
                            command bus.</para>
                    </callout>
                    <callout arearefs="given-when-then-co">
                        <para>These four lines define the actual scenario and its expected result.
                            The first line defines the events that happened in the past. These
                            events define the state of the aggregate under test. In practical terms,
                            these are the events that the event store returns when an aggregate is
                            loaded. The second line defines the command that we wish to execute
                            against our system. Finally, we have two more methods that define
                            expected behavior. In the example, we use the recommended void return
                            type. The last method defines that we expect a single event as result of
                            the command execution.</para>
                    </callout>
                </calloutlist>
            </programlistingco>
        </para>
        <para>The given-when-then test fixture defines three stages: configuration, execution and
            validation. Each of these stages is represented by a different interface:
                <code>FixtureConfiguration</code>, <code>TestExecutor</code> and
                <code>ResultValidator</code>, respectively. The static
                <code>newGivenWhenThenFixture()</code> method on the <code>Fixtures</code> class
            provides a reference to the first of these, which in turn may provide the validator, and
            so forth.</para>
        <note>
            <para>To make optimal use of the migration between these stages, it is best to use the
                fluent interface provided by these methods, as shown in the example above.</para>
        </note>
        <simplesect>
            <title>Configuration</title>
            <para>During the configuration phase (i.e. before the first "given" is provided), you
                provide the building blocks required to execute the test. Specialized versions of
                the event bus, command bus and event store are provided as part of the fixture.
                There are getters in place to obtain references to them. The repository and command
                handlers need to be provided. This can be done using the
                    <code>registerRepository</code> and <code>registerCommandHandler</code> (or
                    <code>registerAnnotatedCommandHandler</code>) methods. If your aggregate allows
                the use of a generic repository, you can use the
                    <code>createGenericRepository</code> method to create a generic repository and
                register it with the fixture in a single call. The example above uses this
                feature.</para>
            <para>If the command handler and repository are configured, you can define the "given"
                events. The test fixture will wrap these events as DomainEventMessage. If the
                "given" event implements Message, the payload and meta data of that message will be
                included in the DomainEventMessage, otherwise the given event is used as payload.
                The sequence numbers of the DomainEventMessage are sequential, starting at 0.</para>
            <para>Alternatively, you may also provide commands as "given" scenario. In that case,
                the events generated by those commands will be used to event source the Aggregate
                when executing the actual command under test. Use the
                    "<code>givenCommands(...)</code>" method to provide Command objects.</para>
        </simplesect>
        <simplesect>
            <title>Execution</title>
            <para>The execution phase allows you to provide a command to be executed against the
                command handling component. That's all. Note that successful execution of this
                command requires that a command handler that can handle this type of command has
                been configured with the test fixture.</para>
            <note>
                <title>Inspecting illegal state changes in Aggregates</title>
                <para>During the execution of the test, Axon attempts to detect any illegal state
                    changes in the Aggregate under test. It does so by comparing the state of the
                    Aggregate after the command execution to the state of the Aggregate if it
                    sourced from all "given" and stored events. If that state is not identical, this
                    means that a state change has occurred outside of an Aggregate's Event Handler
                    method. Static and transient fields are ignored in the comparison, as they
                    typically contain references to resources.</para>
                <para>You can switch detection in the configuration of the fixture with the
                        <code>setReportIllegalStateChange</code> method.</para>
            </note>
        </simplesect>
        <simplesect>
            <title>Validation</title>
            <para>The last phase is the validation phase, and allows you to check on the activities
                of the command handling component. This is done purely in terms of return values and
                events (both stored and dispatched).</para>
            <para>The test fixture allows you to validate return values of your command handlers.
                You can explicitly define the expected return value, which might be void or any arbitrary value. You
                may also express any exceptions you expect the CommandHandler to throw.</para>
            <para>The other component is validation of stored and dispatched events. In most cases,
                the stored and dispatched events are equal. In some cases however, you may dispatch events
                (e.g. <code>ApplicationEvent</code>) that are not stored in the event store. In the
                first case, you can use the <code>expectEvents</code> method to validate events. In
                the latter case, you may use the <code>expectPublishedEvents</code> and
                    <code>expectStoredEvents</code> methods to validate published and stored events,
                respectively.</para>
            <para>There are two ways of matching expected events. </para>
            <para>The first is to pass in Event instances that need to be literally compared with
                the actual events. All properties of the expected Events are compared (using
                    <code>equals()</code>) with their counterparts in the actual Events. If one of
                the properties is not equal, the test fails and an extensive error report is
                generated.</para>
            <para>The other way of expressing expectancies is using Matchers (provided by the
                Hamcrest library). <code>Matcher</code> is an interface prescribing two methods:
                    <code>matches(Object)</code> and <code>describeTo(Description)</code>. The first
                returns a boolean to indicate whether the matcher matches or not. The second allows
                you to express your expectation. For example, a "GreaterThanTwoMatcher" could append
                "any event with value greater than two" to the description. Descriptions allow
                expressive error messages to be created about why a test case fails.</para>
            <para>Creating matchers for a list of events can be tedious and error-prone work. To
                simplify things, Axon provides a set of matchers that allow you to provide a set of
                event specific matchers and tell Axon how they should match against the list.</para>
            <para>Below is an overview of the available Event List matchers and their purpose:<itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">List with all of</emphasis>:
                                <code>Matchers.listWithAllOf(event matchers...)</code></para>
                        <para>This matcher will succeed if all of the provided Event Matchers match
                            against at least one event in the list of actual events. It does not
                            matter whether multiple matchers match against the same event, nor if an
                            event in the list does not match against any of the matchers.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">List with any of</emphasis>:
                                <code>Matchers.listWithAnyOf(event matchers...)</code></para>
                        <para>This matcher will succeed if one of more of the provided Event
                            Matchers matches against one or more of the events in the actual list of
                            events. Some matchers may not even match at all, while another matches
                            against multiple others.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Sequence of Events</emphasis>:
                                <code>Matchers.sequenceOf(event matchers...)</code></para>
                        <para>Use this matcher to verify that the actual Events are match in the
                            same order as the provided Event Matchers. It will succeed if each
                            Matcher matches against an Event that comes after the Event that the
                            previous matcher matched against. This means that "gaps" with unmatched
                            events may appear.</para>
                        <para>If, after evaluating the events, more matchers are available, they are
                            all matched against "<code>null</code>". It is up to the Event Matchers
                            to decide whether they accept that or not.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Exact sequence of Events</emphasis>:
                                <code>Matchers.exactSequenceOf(event matchers...)</code></para>
                        <para>Variation of the "Sequence of Events" matcher where gaps of unmatched
                            events are not allowed. This means each matcher must match against the
                            Event directly following the Event the previous matcher matched
                            against.</para>
                    </listitem>
                </itemizedlist></para>
            <para> For convenience, a few commonly required Event Matchers are provided. They match
                against a single Event instance:<itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Equal Event</emphasis>:
                                <code>Matchers.equalTo(instance...)</code></para>
                        <para>Verifies that the given object is semantically equal to the given
                            event. This matcher will compare all values in the fields of both actual
                            and expected objects using a null-safe equals method. This means that
                            events can be compared, even if they don't implement the equals method.
                            The objects stored in fields of the given parameter <emphasis
                                role="italic">are</emphasis> compared using equals, requiring them
                            to implement one correctly.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">No More Events</emphasis>:
                                <code>Matchers.andNoMore()</code> or
                            <code>Matchers.nothing()</code></para>
                        <para>Only matches against a <code>null</code> value. This matcher can be
                            added as last matcher to the Exact Sequence of Events matchers to ensure
                            that no unmatched events remain.</para>
                    </listitem>
                </itemizedlist></para>
            <para>Since the matchers are passed a list of Event Messages, you sometimes only want to
                verify the payload of the message. There are matchers to help you out:<itemizedlist>
                    <listitem>
                        <para><emphasis role="bold">Payload Matching</emphasis>:
                                <code>Matchers.messageWithPayload(payload matcher)</code></para>
                        <para>Verifies that the payload of a Message matches the given payload
                            matcher.</para>
                    </listitem>
                    <listitem>
                        <para><emphasis role="bold">Payloads Matching</emphasis>:
                                <code>Matchers.payloadsMatching(list matcher)</code></para>
                        <para>Verifies that the payloads of the Messages matches the given matcher.
                            The given matcher must match against a list containing each of the
                            Messages payload. The Payloads Matching matcher is typically used as the
                            outer matcher to prevent repetition of payload matchers.</para>
                    </listitem>
                </itemizedlist></para>
            <para>Below is a small code sample displaying the usage of these matchers. In this
                example, we expect two events to be stored and published. The first event must be a
                "ThirdEvent", and the second "aFourthEventWithSomeSpecialThings". There may be no
                third event, as that will fail against the "andNoMore"
                matcher.<programlisting language="java">fixture.given(new FirstEvent(), new SecondEvent())
       .when(new DoSomethingCommand("aggregateId"))
       .expectEventsMatching(exactSequenceOf(
           // we can match against the payload only:
           messageWithPayload(equalTo(new ThirdEvent())),
           // this will match against a Message
           aFourthEventWithSomeSpecialThings(),
           // this will ensure that there are no more events
           andNoMore()
       ));

// or if we prefer to match on payloads only:
       .expecteEventsMatching(payloadsMatching(
               exactSequenceOf(
                   // we only have payloads, so we can equalTo directly
                   equalTo(new ThirdEvent()),
                   // now, this matcher matches against the payload too
                   aFourthEventWithSomeSpecialThings(),
                   // this still requires that there is no more events
                   andNoMore()
               )
       ));</programlisting></para>
        </simplesect>
    </sect1>
    <sect1>
        <title>Testing Annotated Sagas</title>
        <para>Similar to Command Handling components, Sagas have a clearly defined interface: they
            only respond to Events. On the other hand, Saga's have a notion of time and may interact
            with other components as part of their event handling process. Axon Framework's test
            support module contains fixtures that help you writing tests for sagas.</para>
        <para>Each test fixture contains three phases, similar to those of the Command Handling
            component fixture described in the previous section. <itemizedlist>
                <listitem>
                    <para>given certain events (from certain aggregates),</para>
                </listitem>
                <listitem>
                    <para>when an event arrives or time elapses,</para>
                </listitem>
                <listitem>
                    <para>expect certain behavior or state.</para>
                </listitem>
            </itemizedlist></para>
        <para>Both the "given" and the "when" phases accept events as part of their interaction.
            During the "given" phase, all side effects, such as generated commands are ignored, when
            possible. During the "when" phase, on the other hand, events and commands generated from
            the Saga are recorded and can be verified.</para>
        <para>The following code sample shows an example of how the fixtures can be used to test a
            saga that sends a notification if an invoice isn't paid within 30 days:<programlistingco>
                <areaspec>
                    <area coords="1 87" xml:id="sagafixture-create-co"/>
                    <area coords="2 72" xml:id="sagafixture-given-co"/>
                    <area coords="3 52" xml:id="sagafixture-when-time-co"/>
                    <area coords="4 92" xml:id="sagafixture-then-command-co"/>
                </areaspec>
                <programlisting language="java">AnnotatedSagaTestFixture fixture = new AnnotatedSagaTestFixture(InvoicingSaga.class);
fixture.givenAggregate(invoiceId).published(new InvoiceCreatedEvent())
       .whenTimeElapses(Duration.standardDays(31))
       .expectDispatchedCommandsMatching(Matchers.listWithAllOf(aMarkAsOverdueCommand()));

// or, to match against the payload of a Command Message only
       .expectDispatchedCommandsMatching(Matchers.payloadsMatching(
               Matchers.listWithAllOf(aMarkAsOverdueCommand())));</programlisting>
                <calloutlist>
                    <callout arearefs="sagafixture-create-co">
                        <para>Creates a fixture to test the InvoiceSaga class</para>
                    </callout>
                    <callout arearefs="sagafixture-given-co">
                        <para>Notifies the saga that a specific aggregate (with id "invoiceId") has generated an event</para>
                    </callout>
                    <callout arearefs="sagafixture-when-time-co">
                        <para>Tells the saga that time elapses, triggering events scheduled in that time frame</para>
                    </callout>
                    <callout arearefs="sagafixture-then-command-co">
                        <para>Verifies that the saga has sent a command matching the return value of
                                <code>aMarkAsOverdueCommand()</code> (a Hamcrest matcher)</para>
                    </callout>
                </calloutlist>
               
            </programlistingco></para>
        <simplesect>
            <title>Defining behavior of Command Callbacks</title>
            <para>Sagas can dispatch commands using a callback to be notified of Command processing
                results. Since there is no actual Command Handling done in tests, the behavior is
                defined using a <code>CallbackBehavior</code> object. This object is registered
                using <code>setCallbackBehavior()</code> on the fixture and defines if and how the
                callback must be invoked when a command is dispatched.</para>
            <para>Instead of using a <code>CommandBus</code> directly, you can also use Command
                Gateways. See below on how to specify their behavior.</para>
        </simplesect>
        <simplesect>
            <title>Injecting Resources</title>
            <para>Often, Sagas will interact with external resources. These resources aren't part of
                the Saga's state, but are injected after a Saga is loaded or created. The test
                fixtures allow you to register resources that need to be injected in the Saga. To
                register a resource, simply invoke the <code>fixture.registerResource(Object)</code>
                method with the resource as parameter. The fixture will detect appropriate setter
                methods on the Saga and invoke it with an available resource.</para>
            <tip>
                <title>Injecting mock objects as resources</title>
                <para>It can be very useful to inject mock objects (e.g. Mockito or Easymock) into
                    your Saga. It allows you to verify that the saga interacts correctly with your
                    external resources.</para>
            </tip>
        </simplesect>
        <simplesect>
            <title>Using Command Gateways</title>
            <para>Command Gateways provide Saga's with an easier way to dispatch Commands. Using a
                custom command gateway also makes it easier to create a mock or stub to define its
                behavior in tests. When providing a mock or stub, however, the actual command might
                not be dispatched, making it impossible to verify the sent commands in the test
                fixture.</para>
            <para>Therefore, the fixture provides two methods that allow you to register Command
                Gateways and optionally a mock defining its behavior:
                    <code>registerCommandGateway(Class)</code> and
                    <code>registerCommandGateway(Class, Object)</code>. Both methods return an
                instance of the given class that represents the gateway to use. This instance is
                also registered as a resource, to make it eligible for resource injection.</para>
            <para>When the <code>registerCommandGateway(Class)</code> is used to register a gateway,
                it dispatches Commands to the CommandBus managed by the fixture. The behavior of the
                gateway is mostly defined by the <code>CallbackBehavior</code> defined on the
                fixture. If no explicit <code>CallbackBehavior</code> is provided, callbacks are not
                invoked, making it impossible to provide any return value for the gateway.</para>
            <para>When the <code>registerCommandGateway(Class, Object)</code> is used to register a
                gateway, the second parameter is used to define the behavior of the gateway.</para>
        </simplesect>
        <simplesect>
            <title>Time as a parameter in your tests</title>
            <para xml:id="para_jha_bfw_oc">The test fixture tries to eliminate elapsing system time
                where possible. This means that it will appear that no time elapses while the test
                executes, unless you explicitly state so using <code>whenTimeElapses()</code>. All
                events will have the timestamp of the moment the test fixture was created.</para>
            <para>Having the time stopped during the test makes it easier to predict at what time
                events are scheduled for publication. If your test case verifies that an event is
                scheduled for publication in 30 seconds, it will remain 30 seconds, regardless of
                the time taken between actual scheduling and test execution.<note>
                    <para>Time is stopped using Joda Time's <code>JodaTimeUtils</code> class. This
                        means that the concept of stopped time is only visible when using Joda
                        time's classes. The <code>System.currentTimeMillis()</code> will keep
                        returning the actual date and time. Axon only uses Joda Time classes for
                        Date and Time operations.</para>
                </note></para>
            <para>You can also use the <code>StubEventScheduler</code> independently of the test
                fixtures if you need to test scheduling of events. This <code>EventScheduler</code>
                implementation allows you to verify which events are scheduled for which time and
                gives you options to manipulate the progress of time. You can either advance time
                with a specific <code>Duration</code>, move the clock to a specific
                    <code>DateTime</code> or advance time to the next scheduled event. All these
                operations will return the events scheduled within the progressed interval.</para>
        </simplesect>
    </sect1>
</chapter>
