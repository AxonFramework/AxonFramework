name: Axon Framework (Nightly - Comprehensive LTS Testing)

on:
  schedule:
    - cron: '0 2 * * *'  # Run at 2 AM UTC daily
  workflow_dispatch:  # Allow manual trigger

jobs:
  compile:
    name: Compile on JDK ${{ matrix.java-version }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        java-version: [21, 25]  # All LTS versions
    outputs:
      cache-key-21: ${{ steps.cache-key.outputs.key-21 }}
      cache-key-25: ${{ steps.cache-key.outputs.key-25 }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v5.0.0
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}
          cache: "maven"

      - name: Generate cache key
        id: cache-key
        run: echo "key-${{ matrix.java-version }}=${{ runner.os }}-jdk${{ matrix.java-version }}-${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: Cache compiled artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            **/target
          key: ${{ steps.cache-key.outputs[format('key-{0}', matrix.java-version)] }}

      - name: Compile and Install
        run: |
          ./mvnw -B -U -T 1C -Dstyle.color=always clean install -DskipTests
        env:
          TESTCONTAINERS_REUSE_ENABLE: true
          TESTCONTAINERS_CHECKS_DISABLE: true
          TESTCONTAINERS_RYUK_DISABLED: true

  # Full module breakdown for ALL LTS versions (comprehensive testing)
  test:
    name: JDK ${{ matrix.java-version }} - ${{ matrix.module }}
    needs: compile
    runs-on: ubuntu-latest
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        java-version: [21, 25]
        module:
          - "messaging"
          - "modelling"
          - "eventsourcing"
          - "config"
          - "test"
          - "spring"
          - "axon-server-connector"
          - "metrics"
          - "metrics-micrometer"
          - "tracing-opentelemetry"
          - "migration"
          - "legacy"
          - "spring-boot-autoconfigure"
          - "spring-boot-starter"

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v5.0.0
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}
          cache: "maven"

      - name: Restore compiled artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            **/target
          key: ${{ needs.compile.outputs[format('cache-key-{0}', matrix.java-version)] }}

      - name: Run Tests
        run: |
          ./mvnw -B -T 1C -Dsurefire.rerunFailingTestsCount=5 -Dstyle.color=always test -pl ${{ matrix.module }}
        env:
          TESTCONTAINERS_REUSE_ENABLE: true
          TESTCONTAINERS_CHECKS_DISABLE: true
          TESTCONTAINERS_RYUK_DISABLED: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jdk${{ matrix.java-version }}-${{ matrix.module }}
          path: "**/target/surefire-reports/TEST-*.xml"
        if: always()

  integration-tests:
    name: Integration Tests - JDK ${{ matrix.java-version }}
    needs: compile
    runs-on: ubuntu-latest
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        java-version: [21, 25]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v5.0.0
        with:
          distribution: 'zulu'
          java-version: ${{ matrix.java-version }}
          cache: "maven"

      - name: Restore compiled artifacts
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            **/target
          key: ${{ needs.compile.outputs[format('cache-key-{0}', matrix.java-version)] }}

      - name: Run Integration Tests
        run: |
          ./mvnw -B -T 1C -Dstyle.color=always install -DskipTests -pl integrationtests -am && ./mvnw -B -T 1C -Dstyle.color=always test -pl integrationtests -Dsurefire.rerunFailingTestsCount=5
        env:
          TESTCONTAINERS_REUSE_ENABLE: true
          TESTCONTAINERS_CHECKS_DISABLE: true
          TESTCONTAINERS_RYUK_DISABLED: true

      - name: Upload integration test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-jdk${{ matrix.java-version }}-integration
          path: "**/target/surefire-reports/TEST-*.xml"
        if: always()

  # Test summary per JDK version
  test-summary-jdk21:
    name: Test Summary - JDK 21
    needs: [compile, test, integration-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()

    steps:
      - name: Download JDK 21 test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-jdk21-*
          path: test-results
          merge-multiple: true

      - name: Create test summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/**/TEST-*.xml"
          show: "fail, skip"
        if: always()

  test-summary-jdk25:
    name: Test Summary - JDK 25
    needs: [compile, test, integration-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()

    steps:
      - name: Download JDK 25 test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-jdk25-*
          path: test-results
          merge-multiple: true

      - name: Create test summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/**/TEST-*.xml"
          show: "fail, skip"
        if: always()

  # Aggregate summary across all JDK versions
  test-summary-all:
    name: Test Summary - All JDK Versions
    needs: [compile, test, integration-tests]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: always()

    steps:
      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          path: test-results
          merge-multiple: true

      - name: Create aggregate test summary
        uses: test-summary/action@v2
        with:
          paths: "test-results/**/TEST-*.xml"
          show: "fail, skip"
        if: always()

  notify:
    name: Notify Slack
    needs: [compile, test, integration-tests, test-summary-all]
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Notify success to Slack
        if: needs.test.result == 'success' && needs.integration-tests.result == 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v2
        with:
          channel_id: CAGSEC92A
          status: SUCCESS - Nightly Build
          color: good

      - name: Notify failure to Slack
        if: needs.test.result != 'success' || needs.integration-tests.result != 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v2
        with:
          channel_id: CAGSEC92A
          status: FAILED - Nightly Build
          color: danger
